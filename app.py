from flask import Flask, request, jsonify, send_file
import os
import requests
from docx import Document
from openpyxl import Workbook
from dotenv import load_dotenv
from datetime import datetime
from openpyxl import load_workbook

from init_excel import generate_initiatives_excel

load_dotenv()

app = Flask(__name__)

SBERCHAT_TOKEN = os.getenv("SBERCHAT_TOKEN")
GIGACHAT_API = os.getenv("GIGACHAT_API")
CERT_PATH = os.getenv("CERT_PATH")
KEY_PATH = os.getenv("KEY_PATH")

def load_known_agents_from_excel(path="agents.xlsx"):
    agents = []
    try:
        wb = load_workbook(path)
        ws = wb.active
        for row in ws.iter_rows(min_row=2, max_col=1, values_only=True):
            name = row[0]
            if name:
                agents.append(name.strip().lower())
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel: {e}")
    return agents

KNOWN_AGENTS = load_known_agents_from_excel("agents.xlsx")

def is_authorized(req):
    return req.headers.get("Authorization") == f"Bearer {SBERCHAT_TOKEN}"

def generate_files(data):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    word_path = f"agent_{timestamp}.docx"
    excel_path = f"agent_{timestamp}.xlsx"

    doc = Document()
    doc.add_heading("AI-–∞–≥–µ–Ω—Ç (—à–∞–±–ª–æ–Ω)", 0)
    for key, value in data.items():
        doc.add_heading(key, level=1)
        doc.add_paragraph(value)
    doc.save(word_path)

    wb = Workbook()
    ws = wb.active
    ws.title = "–ê–≥–µ–Ω—Ç"
    ws.append(["–ü–æ–ª–µ", "–ó–Ω–∞—á–µ–Ω–∏–µ"])
    for key, value in data.items():
        ws.append([key, value])
    wb.save(excel_path)

    return word_path, excel_path

def process_with_gigachat(prompt):
    try:
        response = requests.post(
            GIGACHAT_API,
            json={"prompt": prompt},
            cert=(CERT_PATH, KEY_PATH),
            verify=False
        )
        return response.json().get("response", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat.")
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ GigaChat: {str(e)}"

@app.route("/webhook", methods=["POST"])
def webhook():
    if not is_authorized(request):
        return jsonify({"error": "Unauthorized"}), 403

    data = request.json
    user_message = data.get("message", "").strip().lower()

    if user_message == "/start":
        response = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∏–¥–µ—è–º–∏ –¥–ª—è AI-–∞–≥–µ–Ω—Ç–æ–≤.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
        buttons = ["–°—Ç–∞—Ä—Ç"]
        return jsonify({
            "reply": response,
            "buttons": buttons
        })
    
    if user_message == "—Å—Ç–∞—Ä—Ç":
        response = (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
            "- –ù–∞–ø–∏—à–∏ '—à–∞–±–ª–æ–Ω' ‚Äî —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∏–¥–µ—é\n"
            "- –ù–∞–ø–∏—à–∏ '–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞: ...' ‚Äî —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É\n"
            "- –ù–∞–ø–∏—à–∏ '–≥–∏–≥–∞—á–∞—Ç: —Ç–≤–æ—è –∏–¥–µ—è' ‚Äî —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ GigaChat\n"
        )
        return jsonify({
            "reply": response
        })

    if "—à–∞–±–ª–æ–Ω" in user_message:
        template_fields = ["–ù–∞–∑–≤–∞–Ω–∏–µ", "–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è", "–ü—Ä–æ–±–ª–µ–º–∞", "–†–µ—à–µ–Ω–∏–µ", "–ö–∞–Ω–∞–ª—ã", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"]
        response = "–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º —à–∞–±–ª–æ–Ω. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
        response += "\n".join([f"{i+1}. {field}" for i, field in enumerate(template_fields)])
        return jsonify({"reply": response})

    elif user_message.startswith("–∑–∞–ø–æ–ª–Ω–µ–Ω–æ:"):
        raw = user_message.replace("–∑–∞–ø–æ–ª–Ω–µ–Ω–æ:", "").strip()
        pairs = [i.split("=") for i in raw.split(",")]
        data_dict = {k.strip(): v.strip() for k, v in pairs if len(k.strip()) > 0 and len(v.strip()) > 0}
        word_path, excel_path = generate_files(data_dict)
        return jsonify({
            "reply": f"‚úÖ –í–∞—à —à–∞–±–ª–æ–Ω –æ—Ñ–æ—Ä–º–ª–µ–Ω.\nüìÑ Word: {word_path}\nüìä Excel: {excel_path}"
        })

    elif user_message.startswith("–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞:"):
        raw = user_message.replace("–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞:", "").strip()
        pairs = [i.split("=") for i in raw.split(",")]
        initiative = {k.strip().capitalize(): v.strip() for k, v in pairs if len(k.strip()) > 0 and len(v.strip()) > 0}

        agent_name = initiative.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "").lower()

        if agent_name not in KNOWN_AGENTS:
            return jsonify({
                "reply": "üëè –û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –µ—ë –ø–æ —à–∞–±–ª–æ–Ω—É. –ù–∞–ø–∏—à–∏—Ç–µ '—à–∞–±–ª–æ–Ω' –¥–ª—è –Ω–∞—á–∞–ª–∞."
            })
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            temp_dir = tempfile.gettempdir()
            temp_path = os.path.join(temp_dir, f"initiative_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx")
            from init_excel import generate_initiatives_excel
            generate_initiatives_excel([initiative]).replace(temp_path)

            return send_file(
                temp_path,
                as_attachment=True,
                download_name=os.path.basename(temp_path),
                mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            )


    elif "–≥–∏–≥–∞—á–∞—Ç:" in user_message:
        prompt = user_message.replace("–≥–∏–≥–∞—á–∞—Ç:", "").strip()
        result = process_with_gigachat(prompt)
        return jsonify({"reply": f"ü§ñ –û—Ç–≤–µ—Ç GigaChat:\n{result}"})

    else:
        return jsonify({
            "reply": "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∏–¥–µ—è–º–∏ –¥–ª—è AI-–∞–≥–µ–Ω—Ç–æ–≤.\n\n–ù–∞–ø–∏—à–∏ '—à–∞–±–ª–æ–Ω' ‚Äî —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∏–¥–µ—é, '–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞: ...' ‚Äî —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É, –∏–ª–∏ '–≥–∏–≥–∞—á–∞—Ç: —Ç–≤–æ—è –∏–¥–µ—è' ‚Äî —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ GigaChat."
        })

if __name__ == "__main__":
    app.run(port=8080)
