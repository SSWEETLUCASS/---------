import os
import logging
from dotenv import load_dotenv
from dialog_bot_sdk.bot import DialogBot
from dialog_bot_sdk.entities.messaging import UpdateMessage, MessageContentType
from dialog_bot_sdk.entities.messaging import MessageHandler, CommandHandler
from dialog_bot_sdk.interactive_media import InteractiveMediaGroup, InteractiveMedia, InteractiveMediaButton

from ai_agent import check_general_message_with_gigachat, check_idea_with_gigachat_local, generate_files

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–µ–π –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
os.environ["REQUESTS_CA_BUNDLE"] = "/home/sigma.sbrf.ru@22754707/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/main_chat_bot/test/certs/SberCA.pem"
os.environ["GRPC_DEFAULT_SSL_ROOTS_FILE_PATH"] = "/home/sigma.sbrf.ru@22754707/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/main_chat_bot/test/certs/russiantrustedca.pem"

BOT_TOKEN = os.getenv("DIALOG_BOT_TOKEN")
logging.basicConfig(level=logging.INFO)

TEMPLATE_FIELDS = [
    "–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã", "–ß—Ç–æ —Ö–æ—Ç–∏–º —É–ª—É—á—à–∏—Ç—å?", "–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≥–µ–Ω—Ç—É –Ω–∞ –≤—ã—Ö–æ–¥?",
    "–ö–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å–µ–π—á–∞—Å? as-is", "–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç –∞–≥–µ–Ω—Ç–∞?",
    "–î–æ—Å—Ç–∏–∂–∏–º—ã–π –∏–¥–µ–∞–ª(to-be)", "–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ—Ü–µ—Å—Å–∞"
]

user_states = {}

def start_handler(update: UpdateMessage) -> None:
    bot.messaging.send_message(update.peer, """
üëã –ü—Ä–∏–≤–µ—Ç!
–ú–µ–Ω—è –∑–æ–≤—É—Ç *–ê–≥–µ–Ω—Ç–æ–ª–æ–≥*, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∏–¥–µ—è–º–∏ –¥–ª—è AI-–∞–≥–µ–Ω—Ç–æ–≤.

–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:
1. *–£ –º–µ–Ω—è –µ—Å—Ç—å –∏–¥–µ—è!*üí° ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —É–Ω–∏–∫–∞–ª—å–Ω–∞ –ª–∏ –∏–¥–µ—è
2. *–ê–ò-–∞–≥–µ–Ω—Ç—ã?*üìç ‚Äî —Å–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
3. *–ö—Ç–æ –ø–æ–º–æ–∂–µ—Ç?*üí¨ ‚Äî –Ω–∞–π—Ç–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
4. *–ü–æ–¥–¥–µ—Ä–∂–∫–∞üìù* ‚Äî –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫–æ–º–∞–Ω–¥–µ
""")

def idea_handler(update: UpdateMessage) -> None:
    peer = update.peer
    user_id = peer.id
    user_states[user_id] = {"mode": "choose"}

    bot.messaging.send_message(peer, 
        "üìù *–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –∏–¥–µ—é?*\n\n"
        "1Ô∏è‚É£ *–î–∞–≤–∞–π —à–∞–±–ª–æ–Ω!* ‚Äî —è –ø–æ–º–æ–≥—É –ø–æ—ç—Ç–∞–ø–Ω–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ—é –ø–æ –ø–æ–ª—è–º.\n"
        "2Ô∏è‚É£ *–Ø –º–æ–≥—É –∏ —Å–∞–º –Ω–∞–ø–∏—Å–∞—Ç—å* ‚Äî –µ—Å–ª–∏ —Ç—ã —É–∂–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ —Ö–æ—á–µ—à—å, –Ω–∞–ø–∏—à–∏ –≤—Å—ë –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
        "üëâ –ù–∞–ø–∏—à–∏ `—à–∞–±–ª–æ–Ω` –∏–ª–∏ `—Å–∞–º`, –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:")

    media_group = InteractiveMediaGroup(
        media=[
            InteractiveMedia(
                buttons=[
                    InteractiveMediaButton("–î–∞–≤–∞–π —à–∞–±–ª–æ–Ω!", "–î–∞–≤–∞–π —à–∞–±–ª–æ–Ω!"),
                    InteractiveMediaButton("–Ø –º–æ–≥—É –∏ —Å–∞–º –Ω–∞–ø–∏—Å–∞—Ç—å", "–Ø –º–æ–≥—É –∏ —Å–∞–º –Ω–∞–ø–∏—Å–∞—Ç—å")
                ]
            )
        ]
    )
    bot.messaging.send_message(peer, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∏–¥–µ–∏:", [media_group])

def agent_handler(update: UpdateMessage) -> None:
    peer = update.peer
    agents_file_path = "agents.xlsx"
    if os.path.exists(agents_file_path):
        with open(agents_file_path, "rb") as f:
            bot.messaging.send_file(peer, f, filename="agents.xlsx")
    else:
        bot.messaging.send_message(peer, "‚ö†Ô∏è –§–∞–π–ª —Å –∞–≥–µ–Ω—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def group_handler(update: UpdateMessage) -> None:
    peer = update.peer
    agents_file_path = "agents.xlsx"
    if not os.path.exists(agents_file_path):
        bot.messaging.send_message(peer, "‚ö†Ô∏è –§–∞–π–ª —Å –∞–≥–µ–Ω—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    query_text = "–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ AI-–∞–≥–µ–Ω—Ç–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–π–ª–∞"
    user_data = {"–§–∞–π–ª": agents_file_path}
    bot.messaging.send_message(peer, "üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ GigaChat...")
    response, is_unique, parsed_data, _ = check_idea_with_gigachat_local(query_text, user_data, is_free_form=True)
    bot.messaging.send_message(peer, f"ü§ñ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{response}")

def help_handler(update: UpdateMessage) -> None:
    bot.messaging.send_message(update.peer, """
üìù –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
üì¨ @sigma.sbrf.ru@22754707
üìß sigma.sbrf.ru@22754707
""")

def text_handler(update: UpdateMessage) -> None:
    message = update.message
    peer = update.peer
    user_id = peer.id

    msg = message.text_message.text.strip() if message.text_message and message.text_message.text else ""
    state = user_states.get(user_id, {})
    logging.info(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} | msg: '{msg}' | state: {state}")

    if msg.lower() in ["/start", "./start", "start"]:
        start_handler(update)
        return
    elif msg.lower() in ["/idea", "idea", "–∏–¥–µ—è", "–ø—Ä–∏–¥—É–º–∞–ª"]:
        idea_handler(update)
        return
    elif msg.lower() in ["/ai", "ai", "–∞–≥–µ–Ω—Ç", "–∞–≥–µ–Ω—Ç–æ–ª–æ–≥"]:
        agent_handler(update)
        return
    elif msg.lower() in ["/help", "help", "–ø–æ–º–æ—â—å"]:
        help_handler(update)
        return
    elif msg.lower() in ["/–∫—Ç–æ –ø–æ–º–æ–∂–µ—Ç?", "ai_agent", "–∞–≥–µ–Ω—Ç—ã", "–≥—Ä—É–ø–ø–∞"]:
        group_handler(update)
        return

    if state.get("mode") == "choose":
        msg_clean = msg.lower()
        if msg_clean in ["—à–∞–±–ª–æ–Ω", "–¥–∞–≤–∞–π —à–∞–±–ª–æ–Ω!", "—Ö–æ—á—É —à–∞–±–ª–æ–Ω", "–ø–æ —à–∞–±–ª–æ–Ω—É"]:
            user_states[user_id] = {"mode": "template", "step": 0, "data": {}}
            bot.messaging.send_message(peer, "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: *–®–∞–±–ª–æ–Ω*\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ.")
            bot.messaging.send_message(peer, f"1Ô∏è‚É£ {TEMPLATE_FIELDS[0]}:")
            return
        elif msg_clean in ["—Å–∞–º", "—Å–≤–æ–±–æ–¥–Ω–æ", "—Ö–æ—á—É —Å–∞–º", "—è –º–æ–≥—É –∏ —Å–∞–º –Ω–∞–ø–∏—Å–∞—Ç—å"]:
            user_states[user_id] = {"mode": "freeform", "awaiting_text": True}
            bot.messaging.send_message(peer, "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: *–°–≤–æ–±–æ–¥–Ω–∞—è —Ñ–æ—Ä–º–∞*\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∏–¥–µ—é:")
            return
        else:
            bot.messaging.send_message(peer, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ `—à–∞–±–ª–æ–Ω` –∏–ª–∏ `—Å–∞–º`.")
            return

    if state.get("mode") == "template":
        step = state.get("step", 0)
        field = TEMPLATE_FIELDS[step]
        state.setdefault("data", {})
        state["data"][field] = msg
        step += 1

        if step < len(TEMPLATE_FIELDS):
            user_states[user_id]["step"] = step
            bot.messaging.send_message(peer, f"{step + 1}Ô∏è‚É£ {TEMPLATE_FIELDS[step]}:")
        else:
            bot.messaging.send_message(peer, "‚úÖ –ü—Ä–æ–≤–µ—Ä—è—é –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É —á–µ—Ä–µ–∑ GigaChat...")
            result, is_unique, _, _ = check_idea_with_gigachat_local("", state["data"], is_free_form=False)
            bot.messaging.send_message(peer, f"ü§ñ –û—Ç–≤–µ—Ç GigaChat:\n\n{result}")
            if is_unique:
                word_path, excel_path = generate_files(state["data"])
                bot.messaging.send_file(peer, open(word_path, "rb"), filename=os.path.basename(word_path))
                bot.messaging.send_file(peer, open(excel_path, "rb"), filename=os.path.basename(excel_path))
            user_states.pop(user_id)
        return

    if state.get("mode") == "freeform" and state.get("awaiting_text"):
        user_data = {"–û–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ": msg}
        bot.messaging.send_message(peer, "üîç –û—Ç–ø—Ä–∞–≤–ª—è—é –∏–¥–µ—é –≤ GigaChat...")
        response, is_unique, parsed_data, _ = check_idea_with_gigachat_local(msg, user_data, is_free_form=True)
        bot.messaging.send_message(peer, f"ü§ñ –û—Ç–≤–µ—Ç GigaChat:\n\n{response}")

        if is_unique and parsed_data:
            word_path, excel_path = generate_files(parsed_data)
            bot.messaging.send_file(peer, open(word_path, "rb"), filename=os.path.basename(word_path))
            bot.messaging.send_file(peer, open(excel_path, "rb"), filename=os.path.basename(excel_path))

        user_states.pop(user_id)
        return

    if not state:
        response_text, is_maybe_idea = check_general_message_with_gigachat(msg)
        bot.messaging.send_message(peer, f"ü§ñ –û—Ç–≤–µ—Ç GigaChat:\n\n{response_text}")

        if is_maybe_idea:
            user_states[user_id] = {"mode": "choose"}
            bot.messaging.send_message(peer,
                "üß† –ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –∏–¥–µ—è! –•–æ—Ç–∏—Ç–µ –µ—ë –æ—Ñ–æ—Ä–º–∏—Ç—å?\n\n"
                "1Ô∏è‚É£ *–î–∞–≤–∞–π —à–∞–±–ª–æ–Ω!* ‚Äî —è –ø–æ–º–æ–≥—É –ø–æ—ç—Ç–∞–ø–Ω–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ—é –ø–æ –ø–æ–ª—è–º.\n"
                "2Ô∏è‚É£ *–Ø –º–æ–≥—É –∏ —Å–∞–º –Ω–∞–ø–∏—Å–∞—Ç—å* ‚Äî –µ—Å–ª–∏ —Ç—ã —É–∂–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ —Ö–æ—á–µ—à—å, –Ω–∞–ø–∏—à–∏ –≤—Å—ë –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
                "üëâ –ù–∞–ø–∏—à–∏ `—à–∞–±–ª–æ–Ω` –∏–ª–∏ `—Å–∞–º`, –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:")
            media_group = InteractiveMediaGroup(
                media=[
                    InteractiveMedia(
                        buttons=[
                            InteractiveMediaButton("–î–∞–≤–∞–π —à–∞–±–ª–æ–Ω!", "–î–∞–≤–∞–π —à–∞–±–ª–æ–Ω!"),
                            InteractiveMediaButton("–Ø –º–æ–≥—É –∏ —Å–∞–º –Ω–∞–ø–∏—Å–∞—Ç—å", "–Ø –º–æ–≥—É –∏ —Å–∞–º –Ω–∞–ø–∏—Å–∞—Ç—å")
                        ]
                    )
                ]
            )
            bot.messaging.send_message(peer, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∏–¥–µ–∏:", [media_group])

def main():
    global bot
    bot = DialogBot.create_bot({
        "endpoint": "epbotsift.sberchat.sberbank.ru",
        "token": BOT_TOKEN,
        "is_secure": True,
    })

    bot.messaging.command_handler([
        CommandHandler(start_handler, "start"),
        CommandHandler(idea_handler, "idea"),
        CommandHandler(agent_handler, "ai_agent"),
        CommandHandler(group_handler, "group"),
        CommandHandler(help_handler, "help"),
    ])

    bot.messaging.message_handler([
        MessageHandler(text_handler, MessageContentType.TEXT_MESSAGE)
    ])

    bot.updates.on_updates(do_read_message=True, do_register_commands=True)

if __name__ == "__main__":
    main()
