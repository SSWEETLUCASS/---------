from dialog_bot_sdk.bot import DialogBot
from dialog_bot_sdk.handle_updates import AbstractHandler
from dialog_bot_sdk.entities.peers import PeerType
from dialog_bot_sdk.utils import AsyncTask
from openpyxl import load_workbook, Workbook
from openpyxl.styles import Font, Border, Side, Alignment
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
from dotenv import load_dotenv
import logging
import os
import re
import requests
from datetime import datetime
from ai_agent import check_idea_with_gigachat_local,generate_files

load_dotenv()

BOT_TOKEN = os.getenv("DIALOG_BOT_TOKEN")

TEMPLATE_FIELDS = [
    "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ß—Ç–æ —Ö–æ—Ç–∏–º —É–ª—É—á—à–∏—Ç—å?", "–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≥–µ–Ω—Ç—É –Ω–∞ –≤—ã—Ö–æ–¥?",
    "–ö–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å–µ–π—á–∞—Å? as-is", "–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç –∞–≥–µ–Ω—Ç–∞?",
    "–î–æ—Å—Ç–∏–∂–∏–º—ã–π –∏–¥–µ–∞–ª(to-be)", "–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ—Ü–µ—Å—Å–∞"
]

user_states = {}
agent_query_state = {}

class BotHandler(AbstractHandler):
    def __init__(self, bot):
        self.bot = bot

    def on_message(self, peer, sender, message_text):
        user_id = sender.uid
        msg = message_text.strip()

        if msg == "–£ –º–µ–Ω—è –µ—Å—Ç—å –∏–¥–µ—è!üíå":
            user_states[user_id] = {
                "mode": "choose",
                "step": None,
                "data": {},
                "giga_mode": False
            }
            self.bot.messaging.send_message(peer, "üìù –ö–∞–∫ —Ö–æ—Ç–∏—Ç–µ –æ–ø–∏—Å–∞—Ç—å –∏–¥–µ—é?\n\n- —à–∞–±–ª–æ–Ω\n- —Å–≤–æ–±–æ–¥–Ω–æ")
            return

        # —ç—Ç–∞–ø –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
        if user_id in user_states and user_states[user_id].get("mode") == "choose":
            if msg.lower() in ("—à–∞–±–ª–æ–Ω", "–ø–æ —à–∞–±–ª–æ–Ω—É"):
                user_states[user_id]["mode"] = "template"
                user_states[user_id]["step"] = 0
                user_states[user_id]["data"] = {}
                self.bot.messaging.send_message(peer, f"1‚É£ {TEMPLATE_FIELDS[0]}:")
            elif msg.lower() in ("—Å–≤–æ–±–æ–¥–Ω–æ", "—Å–≤–æ–±–æ–¥–Ω–∞—è —Ñ–æ—Ä–º–∞"):
                user_states[user_id]["mode"] = "freeform"
                self.bot.messaging.send_message(peer, "üìù –û–ø–∏—à–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ:")
            else:
                self.bot.messaging.send_message(peer, "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: —à–∞–±–ª–æ–Ω –∏–ª–∏ —Å–≤–æ–±–æ–¥–Ω–æ.")
            return

        # —Å–≤–æ–±–æ–¥–Ω–∞—è —Ñ–æ—Ä–º–∞
        if user_states.get(user_id, {}).get("mode") == "freeform":
            idea_text = msg
            self.bot.messaging.send_message(peer, "üîç –ü—Ä–æ–≤–µ—Ä—è—é —á–µ—Ä–µ–∑ GigaChat...")
            result, is_unique, parsed_data = check_idea_with_gigachat_local(
                idea_text,
                {"–û–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ": idea_text},
                is_free_form=True
            )
            self.bot.messaging.send_message(peer, f"ü§ñ –û—Ç–≤–µ—Ç GigaChat:\n\n{result}")
            if is_unique:
                self.bot.messaging.send_message(peer, "‚úÖ –ò–¥–µ—è —É–Ω–∏–∫–∞–ª—å–Ω–∞!")
                if parsed_data:
                    word_path, excel_path = generate_files(parsed_data)
                    with open(word_path, "rb") as doc_file:
                        self.bot.messaging.send_file(peer, doc_file.read(), word_path)
                    with open(excel_path, "rb") as excel_file:
                        self.bot.messaging.send_file(peer, excel_file.read(), excel_path)
                    os.remove(word_path)
                    os.remove(excel_path)
                else:
                    self.bot.messaging.send_message(peer, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤.")
            else:
                self.bot.messaging.send_message(peer, "‚ö†Ô∏è –ò–¥–µ—è –Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω–∞ –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω–∞.")
            user_states.pop(user_id)
            return

        # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø–æ —à–∞–≥–∞–º
        if user_states.get(user_id, {}).get("mode") == "template":
            state = user_states[user_id]
            step = state["step"]
            if step is not None and step < len(TEMPLATE_FIELDS):
                field = TEMPLATE_FIELDS[step]
                state["data"][field] = msg
                state["step"] += 1

                if state["step"] < len(TEMPLATE_FIELDS):
                    next_field = TEMPLATE_FIELDS[state["step"]]
                    self.bot.messaging.send_message(peer, f"{state['step'] + 1}‚É£ {next_field}:")
                else:
                    self.bot.messaging.send_message(peer, "üîç –ü—Ä–æ–≤–µ—Ä—è—é —á–µ—Ä–µ–∑ GigaChat...")
                    data = {
                        "–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã": state["data"].get("–ù–∞–∑–≤–∞–Ω–∏–µ", ""),
                        "–ß—Ç–æ —Ö–æ—Ç–∏–º —É–ª—É—á—à–∏—Ç—å?": state["data"].get("–ß—Ç–æ —Ö–æ—Ç–∏–º —É–ª—É—á—à–∏—Ç—å?", ""),
                        "–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≥–µ–Ω—Ç—É –Ω–∞ –≤—ã—Ö–æ–¥?": state["data"].get("–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≥–µ–Ω—Ç—É –Ω–∞ –≤—ã—Ö–æ–¥?", ""),
                        "–ö–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å–µ–π—á–∞—Å? as-is": state["data"].get("–ö–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å–µ–π—á–∞—Å? as-is", ""),
                        "–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç –∞–≥–µ–Ω—Ç–∞?": state["data"].get("–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç –∞–≥–µ–Ω—Ç–∞?", ""),
                        "–î–æ—Å—Ç–∏–∂–∏–º—ã–π –∏–¥–µ–∞–ª(to-be)": state["data"].get("–î–æ—Å—Ç–∏–∂–∏–º—ã–π –∏–¥–µ–∞–ª(to-be)", ""),
                        "–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ—Ü–µ—Å—Å–∞": state["data"].get("–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ—Ü–µ—Å—Å–∞", "")
                    }
                    result, is_unique, _ = check_idea_with_gigachat_local("", data)
                    self.bot.messaging.send_message(peer, f"ü§ñ –û—Ç–≤–µ—Ç GigaChat:\n\n{result}")
                    if is_unique:
                        self.bot.messaging.send_message(peer, "‚úÖ –ò–¥–µ—è —É–Ω–∏–∫–∞–ª—å–Ω–∞! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
                        word_path, excel_path = generate_files(data)
                        with open(word_path, "rb") as doc_file:
                            self.bot.messaging.send_file(peer, doc_file.read(), word_path)
                        with open(excel_path, "rb") as excel_file:
                            self.bot.messaging.send_file(peer, excel_file.read(), excel_path)
                        os.remove(word_path)
                        os.remove(excel_path)
            return


        if msg == "–ê–ò-–∞–≥–µ–Ω—Ç—ã?üìç":
            self.bot.messaging.send_message(peer, "üìã –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å? –ù–∞–ø–∏—à–∏—Ç–µ: –í—Å–µ –∞–≥–µ–Ω—Ç—ã –∏–ª–∏ –ò—Å–∫–∞—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
            return

        if msg.lower() == "–≤—Å–µ –∞–≥–µ–Ω—Ç—ã":
            try:
                with open("agents.xlsx", "rb") as f:
                    self.bot.messaging.send_file(peer, f.read(), "agents.xlsx")
            except Exception as e:
                self.bot.messaging.send_message(peer, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e}")
            return

        if msg.lower() == "–∏—Å–∫–∞—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é":
            agent_query_state[user_id] = True
            self.bot.messaging.send_message(peer, "üîç –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞:")
            return

        if agent_query_state.get(user_id):
            agent_query_state[user_id] = False
            term = msg.lower()
            try:
                wb = load_workbook("agents.xlsx")
                ws = wb.active
                results = [r for r in ws.iter_rows(min_row=2, values_only=True) if term in (r[0] or '').lower()]
                if not results:
                    self.bot.messaging.send_message(peer, "‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                else:
                    for r in results:
                        name, team, contact, desc = r
                        self.bot.messaging.send_message(
                            peer,
                            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n–ö–æ–º–∞–Ω–¥–∞: {team}\n–ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n–û–ø–∏—Å–∞–Ω–∏–µ: {desc}"
                        )
            except Exception as e:
                self.bot.messaging.send_message(peer, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            return

        if msg == "–ö—Ç–æ –ø–æ–º–æ–∂–µ—Ç?üí¨":
            self.bot.messaging.send_message(peer, "üßë‚Äçüíª –ü–æ–∫–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
            return

        if msg == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞üìù":
            self.bot.messaging.send_message(peer, "‚úâÔ∏è –ù–∞–ø–∏—à–∏ –Ω–∞–º t")
            return

        if user_id in user_states:
            state = user_states[user_id]
            step = state.get("step")

            if step is not None and step < len(TEMPLATE_FIELDS):
                field = TEMPLATE_FIELDS[step]
                state["data"][field] = msg
                state["step"] += 1

                if state["step"] < len(TEMPLATE_FIELDS):
                    next_field = TEMPLATE_FIELDS[state["step"]]
                    self.bot.messaging.send_message(peer, f"{state['step'] + 1}‚É£ {next_field}:")
                else:
                    self.bot.messaging.send_message(peer, "‚úÖ –§–æ—Ä–º–∏—Ä—É—é —Ñ–∞–π–ª—ã...")
                    word_path, excel_path = generate_files(state["data"])

                    with open(word_path, "rb") as doc_file:
                        self.bot.messaging.send_file(peer, doc_file.read(), word_path)
                    with open(excel_path, "rb") as excel_file:
                        self.bot.messaging.send_file(peer, excel_file.read(), excel_path)

                    os.remove(word_path)
                    os.remove(excel_path)
                    user_states.pop(user_id)
                    self.bot.messaging.send_message(peer, "üìÅ –®–∞–±–ª–æ–Ω—ã –≥–æ—Ç–æ–≤—ã. –í—ã–±–∏—Ä–∞–π —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
                return

        self.bot.messaging.send_message(peer, "ü§ñ –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é!")


def main():
    bot = DialogBot.get_secure_bot(
        host='your.sber.chat:443',
        token=BOT_TOKEN,
        port=443,
        cert='path_to_cert.pem',  # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω SSL
    )
    handler = BotHandler(bot)
    bot.updates.set_update_handler(handler)
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    while True:
        pass

if __name__ == "__main__":
    main()