import os
import logging
from dotenv import load_dotenv

from dialog_bot_sdk.bot import DialogBot
from dialog_bot_sdk.entities.messaging import UpdateMessage, MessageContentType
from dialog_bot_sdk.entities.messaging import MessageHandler, CommandHandler

from ai_agent import (
    check_general_message_with_gigachat,
    check_idea_with_gigachat_local,
    generate_files,
    generate_agents_summary_file,
    find_agent_owners,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–µ–π –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
os.environ["REQUESTS_CA_BUNDLE"] = "/home/sigma.sbrf.ru@22754707/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/main_chat_bot/test/certs/SberCA.pem"
os.environ["GRPC_DEFAULT_SSL_ROOTS_FILE_PATH"] = "/home/sigma.sbrf.ru@22754707/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/main_chat_bot/test/certs/russiantrustedca.pem"

BOT_TOKEN = os.getenv("DIALOG_BOT_TOKEN")
logging.basicConfig(level=logging.INFO)

TEMPLATE_FIELDS = [
    "–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã", "–ß—Ç–æ —Ö–æ—Ç–∏–º —É–ª—É—á—à–∏—Ç—å?", "–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≥–µ–Ω—Ç—É –Ω–∞ –≤—ã—Ö–æ–¥?",
    "–ö–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å–µ–π—á–∞—Å? as-is", "–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç –∞–≥–µ–Ω—Ç–∞?",
    "–î–æ—Å—Ç–∏–∂–∏–º—ã–π –∏–¥–µ–∞–ª(to-be)", "–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ—Ü–µ—Å—Å–∞"
]

user_states = {}
bot = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è

def start_handler(update: UpdateMessage) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.peer.id
    user_states[user_id] = {"mode": "main_menu"}
    
    bot.messaging.send_message(update.peer, """
üëã –ü—Ä–∏–≤–µ—Ç!
–ú–µ–Ω—è –∑–æ–≤—É—Ç *–ê–≥–µ–Ω—Ç–æ–ª–æ–≥*, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∏–¥–µ—è–º–∏ –¥–ª—è AI-–∞–≥–µ–Ω—Ç–æ–≤.

–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:
1. *–£ –º–µ–Ω—è –µ—Å—Ç—å –∏–¥–µ—è!*üí° ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —É–Ω–∏–∫–∞–ª—å–Ω–∞ –ª–∏ –∏–¥–µ—è
2. *–ê–ò-–∞–≥–µ–Ω—Ç—ã?*üìç ‚Äî —Å–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
3. *–ö—Ç–æ –ø–æ–º–æ–∂–µ—Ç?*üí¨ ‚Äî –Ω–∞–π—Ç–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
4. *–ü–æ–¥–¥–µ—Ä–∂–∫–∞üìù* ‚Äî –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫–æ–º–∞–Ω–¥–µ

üîπ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –æ–ø–∏—à–∏ —Å–≤–æ—é –∏–¥–µ—é!
""")

def idea_handler(update: UpdateMessage) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–¥–µ—è–º–∏"""
    peer = update.peer
    user_id = peer.id
    user_states[user_id] = {"mode": "choose_idea_format", "current_field": 0, "idea_data": {}}

    bot.messaging.send_message(peer,
        "üìù *–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –∏–¥–µ—é?*\n\n"
        "1Ô∏è‚É£ *–î–∞–≤–∞–π —à–∞–±–ª–æ–Ω!* ‚Äî —è –ø–æ–º–æ–≥—É –ø–æ—ç—Ç–∞–ø–Ω–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ—é –ø–æ –ø–æ–ª—è–º.\n"
        "2Ô∏è‚É£ *–Ø –º–æ–≥—É –∏ —Å–∞–º –Ω–∞–ø–∏—Å–∞—Ç—å* ‚Äî –µ—Å–ª–∏ —Ç—ã —É–∂–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ —Ö–æ—á–µ—à—å, –Ω–∞–ø–∏—à–∏ –≤—Å—ë –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
        "üëâ –ù–∞–ø–∏—à–∏ `—à–∞–±–ª–æ–Ω` –∏–ª–∏ `—Å–∞–º`.")

def agent_handler(update: UpdateMessage) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ AI-–∞–≥–µ–Ω—Ç–æ–≤"""
    peer = update.peer
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        agents_file_path = "agents.xlsx"
        if not os.path.exists(agents_file_path):
            bot.messaging.send_message(peer, "‚ö†Ô∏è –§–∞–π–ª —Å –∞–≥–µ–Ω—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª...")
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            from openpyxl import Workbook
            wb = Workbook()
            ws = wb.active
            ws.append(["–ë–ª–æ–∫", "–°–°–ü", "–í–ª–∞–¥–µ–ª–µ—Ü", "–ö–æ–Ω—Ç–∞–∫—Ç", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ", "–¢–∏–ø"])
            wb.save(agents_file_path)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º
        summary_file = generate_agents_summary_file(agents_file_path)
        
        bot.messaging.send_message(peer, "üìä *–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ AI-–∞–≥–µ–Ω—Ç–æ–≤:*\n\n"
                                         "üìé –ü—Ä–∏–∫–ª–∞–¥—ã–≤–∞—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        with open(agents_file_path, "rb") as f:
            bot.messaging.send_file(peer, f, filename="agents.xlsx")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
        if summary_file and os.path.exists(summary_file):
            with open(summary_file, "rb") as f:
                bot.messaging.send_file(peer, f, filename=os.path.basename(summary_file))
            os.remove(summary_file)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ agent_handler: {e}")
        bot.messaging.send_message(peer, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

def group_handler(update: UpdateMessage) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∞–≥–µ–Ω—Ç–æ–≤"""
    peer = update.peer
    user_id = peer.id
    
    try:
        agents_file_path = "agents.xlsx"
        if not os.path.exists(agents_file_path):
            bot.messaging.send_message(peer, "‚ö†Ô∏è –§–∞–π–ª —Å –∞–≥–µ–Ω—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
        user_states[user_id] = {"mode": "search_owners"}
        
        bot.messaging.send_message(peer, 
            "üîç *–ü–æ–∏—Å–∫ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ AI-–∞–≥–µ–Ω—Ç–æ–≤*\n\n"
            "–û–ø–∏—à–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –∏–ª–∏ —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '–¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞', '—á–∞—Ç-–±–æ—Ç' –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.\n\n"
            "üëâ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ group_handler: {e}")
        bot.messaging.send_message(peer, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

def help_handler(update: UpdateMessage) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏"""
    bot.messaging.send_message(update.peer, """
üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:*

üìß **Email:** sigma.sbrf.ru@22754707
üí¨ **Telegram:** @sigma.sbrf.ru@22754707

ü§ñ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:**
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–¥–µ–π –¥–ª—è AI-–∞–≥–µ–Ω—Ç–æ–≤
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
‚Ä¢ –ü–æ–∏—Å–∫ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤

üí° **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∏–¥–µ—é –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.

üîÑ –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ `/start`
""")

def process_template_idea(update: UpdateMessage, user_id: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–¥–µ–∏ –ø–æ —à–∞–±–ª–æ–Ω—É (–ø–æ—ç—Ç–∞–ø–Ω–æ)"""
    peer = update.peer
    text = update.message.text_message.text.strip()
    
    state = user_states[user_id]
    current_field = state["current_field"]
    
    if current_field > 0:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        field_name = TEMPLATE_FIELDS[current_field - 1]
        state["idea_data"][field_name] = text
    
    if current_field < len(TEMPLATE_FIELDS):
        # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        field_name = TEMPLATE_FIELDS[current_field]
        bot.messaging.send_message(peer, f"üìù **{field_name}**\n\n–û–ø–∏—à–∏—Ç–µ —ç—Ç–æ—Ç –∞—Å–ø–µ–∫—Ç –≤–∞—à–µ–π –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã:")
        state["current_field"] += 1
    else:
        # –í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–¥–µ—é
        bot.messaging.send_message(peer, "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—è—é —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–¥–µ–∏...")
        
        try:
            response, is_unique, parsed_data, _ = check_idea_with_gigachat_local(
                text, state["idea_data"], is_free_form=False
            )
            
            bot.messaging.send_message(peer, f"üß† **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:**\n\n{response}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
            if state["idea_data"]:
                word_path, excel_path = generate_files(state["idea_data"])
                bot.messaging.send_message(peer, "üìé –ü—Ä–∏–∫–ª–∞–¥—ã–≤–∞—é —Ñ–∞–π–ª—ã —Å –≤–∞—à–µ–π –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–æ–π:")
                
                with open(word_path, "rb") as f_docx:
                    bot.messaging.send_file(peer, f_docx, filename=os.path.basename(word_path))
                
                with open(excel_path, "rb") as f_xlsx:
                    bot.messaging.send_file(peer, f_xlsx, filename=os.path.basename(excel_path))
                
                os.remove(word_path)
                os.remove(excel_path)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user_states[user_id] = {"mode": "main_menu"}
            bot.messaging.send_message(peer, "\nüîÑ –î–ª—è –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ `/start`")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à–∞–±–ª–æ–Ω–Ω–æ–π –∏–¥–µ–∏: {e}")
            bot.messaging.send_message(peer, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
            user_states[user_id] = {"mode": "main_menu"}

def text_handler(update: UpdateMessage, widget=None):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.message or not update.message.text_message:
        return

    text = update.message.text_message.text.strip()
    user_id = update.peer.id
    peer = update.peer

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state = user_states.get(user_id, {"mode": "main_menu"})
    
    logging.info(f"üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {text}")
    logging.info(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if state["mode"] == "choose_idea_format":
        if "—à–∞–±–ª–æ–Ω" in text.lower():
            state["mode"] = "template_idea"
            state["current_field"] = 0
            state["idea_data"] = {}
            process_template_idea(update, user_id)
            return
        elif "—Å–∞–º" in text.lower():
            state["mode"] = "free_form_idea"
            bot.messaging.send_message(peer, 
                "üìù *–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∏–¥–µ—é —Å–≤–æ–±–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º:*\n\n"
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –æ —Ç–æ–º, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å "
                "–∏–ª–∏ —É–ª—É—á—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é AI-–∞–≥–µ–Ω—Ç–∞.")
            return
        else:
            bot.messaging.send_message(peer, 
                "‚ùì –ù–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏—Ç–µ `—à–∞–±–ª–æ–Ω` –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è "
                "–∏–ª–∏ `—Å–∞–º` –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è.")
            return
    
    elif state["mode"] == "template_idea":
        process_template_idea(update, user_id)
        return
    
    elif state["mode"] == "free_form_idea":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º—ã –∏–¥–µ–∏
        bot.messaging.send_message(peer, "üí° –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É –∏–¥–µ—é...")
        
        try:
            user_data = {"–û–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ": text}
            response, is_unique, parsed_data, suggest_processing = check_idea_with_gigachat_local(
                text, user_data, is_free_form=True
            )
            
            bot.messaging.send_message(peer, f"üß† **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:**\n\n{response}")
            
            if parsed_data:
                word_path, excel_path = generate_files(parsed_data)
                bot.messaging.send_message(peer, "üìé –ü—Ä–∏–∫–ª–∞–¥—ã–≤–∞—é —Ñ–∞–π–ª—ã —Å –≤–∞—à–µ–π –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–æ–π:")
                
                with open(word_path, "rb") as f_docx:
                    bot.messaging.send_file(peer, f_docx, filename=os.path.basename(word_path))
                
                with open(excel_path, "rb") as f_xlsx:
                    bot.messaging.send_file(peer, f_xlsx, filename=os.path.basename(excel_path))
                
                os.remove(word_path)
                os.remove(excel_path)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user_states[user_id] = {"mode": "main_menu"}
            bot.messaging.send_message(peer, "\nüîÑ –î–ª—è –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ `/start`")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–≤–æ–±–æ–¥–Ω–æ–π –∏–¥–µ–∏: {e}")
            bot.messaging.send_message(peer, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
            user_states[user_id] = {"mode": "main_menu"}
        return
    
    elif state["mode"] == "search_owners":
        # –ü–æ–∏—Å–∫ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∞–≥–µ–Ω—Ç–æ–≤
        bot.messaging.send_message(peer, "üîç –ò—â—É –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É...")
        
        try:
            owners_info = find_agent_owners(text)
            bot.messaging.send_message(peer, f"üë• **–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–ª–∞–¥–µ–ª—å—Ü—ã:**\n\n{owners_info}")
            
            user_states[user_id] = {"mode": "main_menu"}
            bot.messaging.send_message(peer, "\nüîÑ –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ `/start`")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤: {e}")
            bot.messaging.send_message(peer, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            user_states[user_id] = {"mode": "main_menu"}
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é)
    try:
        gpt_response, maybe_idea, command = check_general_message_with_gigachat(text)
        
        logging.info(f"üîé –û—Ç–≤–µ—Ç GigaChat: {gpt_response}, CMD: {command}, –ü–æ—Ö–æ–∂–µ –Ω–∞ –∏–¥–µ—é: {maybe_idea}")

        if command == "help":
            help_handler(update)
            return
        elif command == "start":
            start_handler(update)
            return
        elif command == "ai_agent":
            agent_handler(update)
            return
        elif command == "group":
            group_handler(update)
            return
        elif command == "idea":
            idea_handler(update)
            return

        if maybe_idea:
            bot.messaging.send_message(peer, "üí° –ü–æ—Ö–æ–∂–µ, –≤—ã –æ–ø–∏—Å–∞–ª–∏ –∏–¥–µ—é. –°–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä—é...")
            
            user_data = {"–û–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ": text}
            response, is_unique, parsed_data, suggest_processing = check_idea_with_gigachat_local(
                text, user_data, is_free_form=True)

            bot.messaging.send_message(peer, f"üß† **–û—Ç–≤–µ—Ç GigaChat:**\n\n{response}")

            if parsed_data:
                word_path, excel_path = generate_files(parsed_data)
                bot.messaging.send_message(peer, "üìé –ü—Ä–∏–∫–ª–∞–¥—ã–≤–∞—é —Ñ–∞–π–ª—ã —Å –≤–∞—à–µ–π –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–æ–π:")

                with open(word_path, "rb") as f_docx:
                    bot.messaging.send_file(peer, f_docx, filename=os.path.basename(word_path))

                with open(excel_path, "rb") as f_xlsx:
                    bot.messaging.send_file(peer, f_xlsx, filename=os.path.basename(excel_path))

                os.remove(word_path)
                os.remove(excel_path)

            elif suggest_processing:
                bot.messaging.send_message(peer, "ü§î –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–¥–µ—é –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å? –ù–∞–ø–∏—à–∏—Ç–µ `/idea`!")

        else:
            bot.messaging.send_message(peer, gpt_response or "ü§ñ –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ `/start`")
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ text_handler: {e}")
        bot.messaging.send_message(peer, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

def main():
    global bot
    bot = DialogBot.create_bot({
        "endpoint": "epbotsift.sberchat.sberbank.ru",
        "token": BOT_TOKEN,
        "is_secure": True,
    })

    bot.messaging.command_handler([
        CommandHandler(start_handler, "start"),
        CommandHandler(idea_handler, "idea"),
        CommandHandler(agent_handler, "ai_agent"),
        CommandHandler(group_handler, "group"),
        CommandHandler(help_handler, "help"),
    ])

    bot.messaging.message_handler([
        MessageHandler(text_handler, MessageContentType.TEXT_MESSAGE)
    ])

    bot.updates.on_updates(do_read_message=True, do_register_commands=True)

if __name__ == "__main__":
    main()