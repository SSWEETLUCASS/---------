import os
import logging
from dotenv import load_dotenv
from dialog_bot_sdk.bot import DialogBot
from dialog_bot_sdk.entities.messaging import UpdateMessage
from dialog_bot_sdk.entities.messaging import MessageContentType, MessageHandler, CommandHandler
from dialog_bot_sdk.entities.users import User

from ai_agent import check_idea_with_gigachat_local, generate_files

load_dotenv()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SSL
os.environ["REQUESTS_CA_BUNDLE"] = '/home/sigma.sbrf.ru@22754707/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/main_chat_bot/test/certs/SberCA.pem'
os.environ["GRPC_DEFAULT_SSL_ROOTS_FILE_PATH"] = '/home/sigma.sbrf.ru@22754707/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/main_chat_bot/test/certs/russiantrustedca.pem'

BOT_TOKEN = os.getenv("DIALOG_BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

TEMPLATE_FIELDS = [
    "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ß—Ç–æ —Ö–æ—Ç–∏–º —É–ª—É—á—à–∏—Ç—å?", "–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≥–µ–Ω—Ç—É –Ω–∞ –≤—ã—Ö–æ–¥?",
    "–ö–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å–µ–π—á–∞—Å? as-is", "–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç –∞–≥–µ–Ω—Ç–∞?",
    "–î–æ—Å—Ç–∏–∂–∏–º—ã–π –∏–¥–µ–∞–ª(to-be)", "–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ—Ü–µ—Å—Å–∞"
]

user_states = {}

def text_handler(update: UpdateMessage) -> None:
    message = update.message
    user_id = message.sender_uid
    msg = message.text_message.text.strip()
    peer = update.peer

    state = user_states.get(user_id, {})

    logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    if msg.lower() in ["/start", "./start", "start"]:
        start_handler(update)
        return
    elif msg.lower() in ["/idea", "idea","–∏–¥–µ—è","–ø—Ä–∏–¥—É–º–∞–ª"]:
        idea_handler(update)
        return
    elif msg.lower() in ["/ai", "ai","–∞–≥–µ–Ω—Ç","–∞–≥–µ–Ω—Ç–æ–ª–æ–≥"]:
        agent_handler(update)
        return
    elif msg.lower() in ["/help","help","–ø–æ–º–æ—â—å"]:
        help_handler(update)
        return
    elif msg.lower() in ["/–ö—Ç–æ –ø–æ–º–æ–∂–µ—Ç?", "ai_agent","–∞–≥–µ–Ω—Ç—ã","–∞–≥–µ–Ω—Ç–æ–ª–æ–≥"]:
        group_handler(update)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–¥–µ–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ
    if state.get("mode") == "freeform":
        user_data = {"–û–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ": msg}
        bot.messaging.send_message(peer, "üîç –û—Ç–ø—Ä–∞–≤–ª—è—é –∏–¥–µ—é –≤ GigaChat...")
        response, is_unique, parsed_data = check_idea_with_gigachat_local(msg, user_data, is_free_form=True)
        bot.messaging.send_message(peer, f"ü§ñ –û—Ç–≤–µ—Ç GigaChat:\n\n{response}")

        if is_unique and parsed_data:
            word_path, excel_path = generate_files(parsed_data)
            bot.messaging.send_file(peer, word_path)
            bot.messaging.send_file(peer, excel_path)

        user_states.pop(user_id)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–¥–µ–∏ –ø–æ —à–∞–±–ª–æ–Ω—É
    elif state.get("mode") == "template":
        step = state.get("step", 0)
        state.setdefault("data", {})
        field = TEMPLATE_FIELDS[step]
        state["data"][field] = msg
        step += 1

        if step < len(TEMPLATE_FIELDS):
            user_states[user_id]["step"] = step
            bot.messaging.send_message(peer, f"{step + 1}Ô∏è‚É£ {TEMPLATE_FIELDS[step]}:")
        else:
            bot.messaging.send_message(peer, "‚úÖ –ü—Ä–æ–≤–µ—Ä—è—é –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É —á–µ—Ä–µ–∑ GigaChat...")
            result, is_unique, _ = check_idea_with_gigachat_local("", state["data"], is_free_form=False)
            bot.messaging.send_message(peer, f"ü§ñ –û—Ç–≤–µ—Ç GigaChat:\n\n{result}")
            if is_unique:
                word_path, excel_path = generate_files(state["data"])
                bot.messaging.send_file(peer, word_path)
                bot.messaging.send_file(peer, excel_path)
            user_states.pop(user_id)
        return

    # –ò–Ω–∏—Ü–∏–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞
    if msg == "–î–∞–≤–∞–π —à–∞–±–ª–æ–Ω!":
        user_states[user_id] = {
            "mode": "template",
            "step": 0,
            "data": {}
        }
        bot.messaging.send_message(peer, f"1Ô∏è‚É£ {TEMPLATE_FIELDS[0]}:")
        return

    # –ò–Ω–∏—Ü–∏–∞—Ü–∏—è —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º—ã
    if msg == "–Ø –º–æ–≥—É –∏ —Å–∞–º –Ω–∞–ø–∏—Å–∞—Ç—å":
        user_states[user_id] = {"mode": "freeform"}
        bot.messaging.send_message(peer, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ:")
        return

def start_handler(message: UpdateMessage) -> None:
    bot.messaging.send_message(message.peer, """
üëã –ü—Ä–∏–≤–µ—Ç, @user_name!
    –ú–µ–Ω—è –∑–æ–≤—É—Ç *–ê–≥–µ–Ω—Ç–æ–ª–æ–≥*, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∏–¥–µ—è–º–∏ –¥–ª—è AI-–∞–≥–µ–Ω—Ç–æ–≤.

    –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:
    1. *–£ –º–µ–Ω—è –µ—Å—Ç—å –∏–¥–µ—è!*üí°
       –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å, —Ç–≤–æ—è –∏–¥–µ—è —É–Ω–∏–∫–∞–ª—å–Ω–∞!
    2. *–ê–ò-–∞–≥–µ–Ω—Ç—ã?*üìç
      –ê–ò-–∞–≥–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –∑–¥–µ—Å—å –º—ã —Å–æ–±—Ä–∞–ª–∏ —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤!
    3. *–ö—Ç–æ –ø–æ–º–æ–∂–µ—Ç?*üí¨
       –ê–≥–µ–Ω—Ç–æ–≤ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –∏ –Ω–µ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏, –∫—Ç–æ –∏—Ö —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç. –î–∞–≤–∞–π –ø–æ–¥—Å–∫–∞–∂–µ–º, –∫—Ç–æ —ç—Ç–∏ –ª—é–¥–∏!
    4. *–ü–æ–¥–¥–µ—Ä–∂–∫–∞üìù*
      –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —á–∞—Ç-–±–æ—Ç–∞? –ü–∏—à–∏ –Ω–∞–º!
    –°–∫–æ—Ä–µ–µ –≤—ã–±–∏—Ä–∞–π, —á—Ç–æ –º—ã –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º!
""")

def idea_handler(message: UpdateMessage) -> None:
    peer = message.peer
    bot.messaging.send_message(peer, "üí¨ –û–ø–∏—à–∏ —Å–≤–æ—é –∏–¥–µ—é —Å–≤–æ–±–æ–¥–Ω–æ, —è –ø—Ä–æ–≤–µ—Ä—é –µ—ë —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å:")
    user_states[message.message.sender_uid] = {"mode": "freeform"}

def agent_handler(message: UpdateMessage) -> None:
    bot.messaging.send_message(message.peer, "üìç –û—Ç–ø—Ä–∞–≤—è–ª—é —Ç–µ–±–µ —Å–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤:")

def help_handler(message: UpdateMessage) -> None:
    bot.messaging.send_message(message.peer, """
üìù –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
üì¨ –ü–∏—à–∏—Ç–µ –Ω–∞–º: @sigma.sbrf.ru@22754707
üìû –ü–∏—à–∏—Ç–µ –Ω–∞–º: 
üìß –ü–∏—à–∏—Ç–µ –Ω–∞–º: sigma.sbrf.ru@22754707
""")

def group_handler(message: UpdateMessage) -> None:
    bot.messaging.send_message(message.peer, "–î–∞–≤–∞–π –ø–æ–∏—â–µ–º, –∫—Ç–æ —ç—Ç–æ!")

def main():
    global bot
    bot = DialogBot.create_bot({
        "endpoint": "epbotsift.sberchat.sberbank.ru",
        "token": BOT_TOKEN,
        "is_secure": True,
    })

    bot.messaging.command_handler([
        CommandHandler(start_handler, "start", description="–ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è"),
        CommandHandler(idea_handler, "idea", description="–ò–¥–µ—è!"),
        CommandHandler(agent_handler, "ai_agent", description="–ê–∏-–∞–≥–µ–Ω—Ç—ã!"),
        CommandHandler(group_handler, "group", description="–ì—Ä—É–ø–ø–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"),
        CommandHandler(help_handler, "help", description="–ü–æ–º–æ—â—å"),
    ])

    bot.messaging.message_handler([MessageHandler(text_handler, MessageContentType.TEXT_MESSAGE)])
    bot.updates.on_updates(do_read_message=True, do_register_commands=True)

if __name__ == "__main__":
    main()
