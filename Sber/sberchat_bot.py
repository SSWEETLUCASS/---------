import os
import json
import logging
import threading
import time
from datetime import datetime, timedelta
from collections import defaultdict, deque
from typing import Dict, List, Optional, Tuple, Any
from dotenv import load_dotenv
from dialog_bot_sdk.bot import DialogBot
from dialog_bot_sdk.entities.messaging import UpdateMessage, MessageContentType
from dialog_bot_sdk.entities.messaging import MessageHandler, CommandHandler

from ai_agent import (
    check_general_message_with_gigachat,
    check_idea_with_gigachat_local,
    generate_files,
    generate_agents_summary_file,
    find_agent_owners,
    generate_idea_suggestions,
    calculate_work_cost,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('config.json', 'r', encoding='utf-8') as f:
    config = json.load(f)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–µ–π –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
os.environ["REQUESTS_CA_BUNDLE"] = config['file_settings']['certificates']['requests_ca_bundle']
os.environ["GRPC_DEFAULT_SSL_ROOTS_FILE_PATH"] = config['file_settings']['certificates']['grpc_roots']

BOT_TOKEN = os.getenv("DIALOG_BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, config['logging']['level']),
    format=config['logging']['format'],
    filename=config['logging']['file']
)

class UserSession:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    def __init__(self, user_id: int):
        self.user_id = user_id
        self.mode = config['states']['main_menu']
        self.context = {}
        self.message_history = deque(maxlen=10)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        self.last_activity = datetime.now()
        self.conversation_started = False
        self.preferred_communication_style = "friendly"  # friendly, formal, technical
        
    def add_message(self, message: str, is_user: bool = True):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        self.message_history.append({
            'text': message,
            'timestamp': datetime.now(),
            'is_user': is_user
        })
        self.last_activity = datetime.now()
    
    def get_context_for_ai(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò"""
        if not self.message_history:
            return ""
        
        context_messages = []
        for msg in list(self.message_history)[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            sender = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg['is_user'] else "–ë–æ—Ç"
            context_messages.append(f"{sender}: {msg['text']}")
        
        return "–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:\n" + "\n".join(context_messages)
    
    def is_expired(self, timeout_minutes: int = 30) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è"""
        return datetime.now() - self.last_activity > timedelta(minutes=timeout_minutes)

class ConversationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞–º–∏"""
    def __init__(self):
        self.sessions: Dict[int, UserSession] = {}
        self.session_lock = threading.Lock()
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π
        self.cleanup_thread = threading.Thread(target=self._cleanup_expired_sessions, daemon=True)
        self.cleanup_thread.start()
    
    def get_session(self, user_id: int) -> UserSession:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self.session_lock:
            if user_id not in self.sessions or self.sessions[user_id].is_expired():
                self.sessions[user_id] = UserSession(user_id)
            return self.sessions[user_id]
    
    def _cleanup_expired_sessions(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π"""
        while True:
            time.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            with self.session_lock:
                expired_sessions = [
                    user_id for user_id, session in self.sessions.items()
                    if session.is_expired()
                ]
                for user_id in expired_sessions:
                    del self.sessions[user_id]
                    logging.info(f"üóëÔ∏è –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–∞ (–∏—Å—Ç–µ–∫–ª–∞)")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
conversation_manager = ConversationManager()
bot = None

class FileManager:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ñ–∞–π–ª–æ–≤"""
    
    @staticmethod
    def send_file_with_retry(bot_instance, peer, file_path: str, name: str = None, text: str = None, max_retries: int = 3) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(max_retries):
            try:
                if not os.path.exists(file_path):
                    logging.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                    return False
                
                file_size = os.path.getsize(file_path)
                if file_size == 0:
                    logging.warning(f"‚ö†Ô∏è –§–∞–π–ª –ø—É—Å—Ç: {file_path}")
                    return False
                
                logging.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {name} ({file_size} –±–∞–π—Ç)")
                
                with open(file_path, "rb") as f:
                    result = bot_instance.messaging.send_file(
                        peer=peer,
                        file=f,
                        message=text,
                        file_name=name or os.path.basename(file_path),
                    )
                
                logging.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {name}")
                return True
                
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt == max_retries - 1:
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                    try:
                        with open(file_path, "rb") as f:
                            result = bot_instance.messaging.send_filewrapped(
                                peer, f, None, text, name or os.path.basename(file_path)
                            )
                        logging.info(f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º: {name}")
                        return True
                    except Exception as e2:
                        logging.error(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e2}")
                        return False
                time.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
        
        return False

class ResponseGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    
    @staticmethod
    def generate_contextual_response(session: UserSession, text: str) -> Tuple[str, bool, Optional[str]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
            context = session.get_context_for_ai()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            if context:
                full_prompt = f"{context}\n\n–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {text}"
            else:
                full_prompt = text
            
            # –í—ã–∑—ã–≤–∞–µ–º –ò–ò —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            response, is_idea, command = check_general_message_with_gigachat(full_prompt)
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–¥ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if session.preferred_communication_style == "friendly":
                response = ResponseGenerator._make_response_friendly(response)
            elif session.preferred_communication_style == "formal":
                response = ResponseGenerator._make_response_formal(response)
            
            return response, is_idea, command
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", False, None
    
    @staticmethod
    def _make_response_friendly(response: str) -> str:
        """–î–µ–ª–∞–µ—Ç –æ—Ç–≤–µ—Ç –±–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º"""
        if response and not any(emoji in response for emoji in ['üòä', 'üëç', 'ü§ù', 'üí°', 'üî•']):
            # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            friendly_starters = ["–û—Ç–ª–∏—á–Ω–æ! ", "–ü–æ–Ω—è—Ç–Ω–æ! ", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! ", "–•–æ—Ä–æ—à–æ! "]
            import random
            return random.choice(friendly_starters) + response
        return response
    
    @staticmethod
    def _make_response_formal(response: str) -> str:
        """–î–µ–ª–∞–µ—Ç –æ—Ç–≤–µ—Ç –±–æ–ª–µ–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º"""
        # –£–±–∏—Ä–∞–µ–º –∏–∑–ª–∏—à–Ω—é—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        formal_replacements = {
            '!': '.',
            '–æ—Ç–ª–∏—á–Ω–æ': '—Ö–æ—Ä–æ—à–æ',
            '–∫—Ä—É—Ç–æ': '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ',
            '—Å—É–ø–µ—Ä': '–æ—Ç–ª–∏—á–Ω–æ'
        }
        
        for informal, formal in formal_replacements.items():
            response = response.replace(informal, formal)
        
        return response

def detect_communication_style(text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    formal_indicators = ['–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '–∏–∑–≤–∏–Ω–∏—Ç–µ', '–±—É–¥—å—Ç–µ –¥–æ–±—Ä—ã']
    friendly_indicators = ['–ø—Ä–∏–≤–µ—Ç', '—Å–ø–∞—Å–∏–±–æ', '–∫—Ä—É—Ç–æ', '—Å—É–ø–µ—Ä', '!']
    
    text_lower = text.lower()
    
    formal_count = sum(1 for indicator in formal_indicators if indicator in text_lower)
    friendly_count = sum(1 for indicator in friendly_indicators if indicator in text_lower)
    
    if formal_count > friendly_count:
        return "formal"
    elif friendly_count > 0:
        return "friendly"
    else:
        return "neutral"

# –£–ª—É—á—à–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
def start_handler(update: UpdateMessage) -> None:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.peer.id
    session = conversation_manager.get_session(user_id)
    
    session.mode = config['states']['main_menu']
    session.conversation_started = True
    session.add_message("/start")
    
    welcome_message = config['bot_settings']['commands']['start']['response']
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if len(session.message_history) > 1:
        welcome_message = "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! üëã\n\n" + welcome_message
    
    bot.messaging.send_message(update.peer, welcome_message)
    session.add_message(welcome_message, is_user=False)

def smart_idea_handler(update: UpdateMessage) -> None:
    """–£–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–¥–µ—è–º–∏"""
    peer = update.peer
    user_id = peer.id
    session = conversation_manager.get_session(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    if session.mode.startswith("idea_"):
        bot.messaging.send_message(peer, 
            "–í—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –∏–¥–µ–µ–π! üòä\n"
            "–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–Ω–∞—á–∞–ª–∞.")
        return
    
    session.mode = config['states']['idea_choose_format']
    session.context = {"current_field": 0, "idea_data": {}}
    session.add_message("/idea")
    
    # –ë–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    response = (
        "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–µ–º –≤–∞—à—É –∏–¥–µ—é! üí°\n\n"
        "–ö–∞–∫ —É–¥–æ–±–Ω–µ–µ:\n"
        "üîπ **–ü–æ —à–∞–±–ª–æ–Ω—É** - —è –∑–∞–¥–∞–º –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–æ–±—Ä–∞—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
        "üîπ **–°–≤–æ–±–æ–¥–Ω–æ** - —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ–± –∏–¥–µ–µ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –∞ —è —Å–∞–º –≤—ã–¥–µ–ª—é –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ \"—à–∞–±–ª–æ–Ω\" –∏–ª–∏ \"—Å–≤–æ–±–æ–¥–Ω–æ\", –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∏–¥–µ—é - —è –ø–æ–π–º—É! üòâ"
    )
    
    bot.messaging.send_message(peer, response)
    session.add_message(response, is_user=False)

def enhanced_text_handler(update: UpdateMessage, widget=None):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.message or not update.message.text_message:
        return

    text = update.message.text_message.text.strip()
    user_id = update.peer.id
    peer = update.peer
    session = conversation_manager.get_session(user_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    session.add_message(text)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
    detected_style = detect_communication_style(text)
    if detected_style != "neutral":
        session.preferred_communication_style = detected_style
    
    logging.info(f"üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({session.mode}): {text}")

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if session.mode == config['states']['idea_choose_format']:
            handle_idea_format_choice(update, session, text)
            
        elif session.mode == config['states']['idea_template']:
            handle_template_idea(update, session, text)
            
        elif session.mode == config['states']['idea_free_form']:
            handle_free_form_idea(update, session, text)
            
        elif session.mode == config['states']['search_owners']:
            handle_owner_search(update, session, text)
            
        elif session.mode == config['states']['help_with_ideas']:
            handle_idea_generation(update, session, text)
            
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –æ–±—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞
            handle_general_conversation(update, session, text)
    
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ enhanced_text_handler: {e}")
        error_response = (
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ üòî\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å /start –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è."
        )
        bot.messaging.send_message(peer, error_response)
        session.add_message(error_response, is_user=False)
        session.mode = config['states']['main_menu']

def handle_idea_format_choice(update: UpdateMessage, session: UserSession, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–¥–µ–∏"""
    peer = update.peer
    text_lower = text.lower()
    
    if any(word in text_lower for word in ["—à–∞–±–ª–æ–Ω", "–≤–æ–ø—Ä–æ—Å", "—Å—Ç—Ä—É–∫—Ç—É—Ä"]):
        session.mode = config['states']['idea_template']
        session.context["current_field"] = 0
        session.context["idea_data"] = {}
        
        response = "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–π–¥–µ–º—Å—è –ø–æ —à–∞–±–ª–æ–Ω—É üìù\n\n"
        response += f"**{config['template_fields'][0]}**\n"
        response += "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–± —ç—Ç–æ–º –∞—Å–ø–µ–∫—Ç–µ:"
        
    elif any(word in text_lower for word in ["—Å–≤–æ–±–æ–¥", "—Å–∞–º", "—Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏"]):
        session.mode = config['states']['idea_free_form']
        response = (
            "–ü–æ–Ω—è–ª! –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ üí≠\n\n"
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é —Ç–∞–∫, –∫–∞–∫ —É–¥–æ–±–Ω–æ –≤–∞–º. "
            "–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç –∏ –≤—ã–¥–µ–ª—é –≤—Å–µ –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã!"
        )
        
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–∞–∑—É –Ω–∞—á–∞–ª –æ–ø–∏—Å—ã–≤–∞—Ç—å –∏–¥–µ—é
        if len(text.split()) > 10:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ
            session.mode = config['states']['idea_free_form']
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å–≤–æ–±–æ–¥–Ω—É—é —Ñ–æ—Ä–º—É
            handle_free_form_idea(update, session, text)
            return
        else:
            response = (
                "–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –≤—ã–±–æ—Ä ü§î\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ:\n"
                "‚Ä¢ \"—à–∞–±–ª–æ–Ω\" - –¥–ª—è –ø–æ—à–∞–≥–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n"
                "‚Ä¢ \"—Å–≤–æ–±–æ–¥–Ω–æ\" - –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏\n"
                "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ–± –∏–¥–µ–µ!"
            )
    
    bot.messaging.send_message(peer, response)
    session.add_message(response, is_user=False)

def handle_template_idea(update: UpdateMessage, session: UserSession, text: str):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–¥–µ–∏ –ø–æ —à–∞–±–ª–æ–Ω—É"""
    peer = update.peer
    current_field = session.context["current_field"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    if current_field > 0:
        field_name = config['template_fields'][current_field - 1]
        session.context["idea_data"][field_name] = text
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        confirmation = f"‚úÖ –ó–∞–ø–∏—Å–∞–ª: **{field_name}**\n\n"
    else:
        confirmation = ""
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    if current_field < len(config['template_fields']):
        field_name = config['template_fields'][current_field]
        response = f"{confirmation}**{field_name}**\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ–± —ç—Ç–æ–º –∞—Å–ø–µ–∫—Ç–µ:"
        session.context["current_field"] += 1
        
    else:
        # –í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑
        response = confirmation + "–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã üéâ\n\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É –∏–¥–µ—é..."
        
        try:
            analyze_and_respond_idea(peer, session, text, is_template=True)
            return
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —à–∞–±–ª–æ–Ω–Ω–æ–π –∏–¥–µ–∏: {e}")
            response = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start"
            session.mode = config['states']['main_menu']
    
    bot.messaging.send_message(peer, response)
    session.add_message(response, is_user=False)

def handle_free_form_idea(update: UpdateMessage, session: UserSession, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–¥–µ–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ"""
    peer = update.peer
    
    bot.messaging.send_message(peer, "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É –∏–¥–µ—é... üîç")
    
    try:
        analyze_and_respond_idea(peer, session, text, is_template=False)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–≤–æ–±–æ–¥–Ω–æ–π –∏–¥–µ–∏: {e}")
        error_response = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start"
        bot.messaging.send_message(peer, error_response)
        session.add_message(error_response, is_user=False)
        session.mode = config['states']['main_menu']

def analyze_and_respond_idea(peer, session: UserSession, text: str, is_template: bool):
    """–ê–Ω–∞–ª–∏–∑ –∏–¥–µ–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    try:
        if is_template:
            user_data = session.context["idea_data"]
        else:
            user_data = {"–û–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ": text}
        
        response, is_unique, parsed_data, _ = check_idea_with_gigachat_local(
            text, user_data, is_free_form=not is_template
        )
        
        cost_info = calculate_work_cost(parsed_data or user_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
        full_response = (
            f"üß† **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–¥–µ–∏:**\n\n{response}\n\n"
            f"üí∞ **–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:**\n{cost_info}"
        )
        
        bot.messaging.send_message(peer, full_response)
        session.add_message(full_response, is_user=False)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        if parsed_data or user_data:
            generate_and_send_files(peer, session, parsed_data or user_data, cost_info)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        session.mode = config['states']['main_menu']
        
        final_message = (
            "\nüéØ **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
            "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –∏–¥–µ—é? –ù–∞–ø–∏—à–∏—Ç–µ `/idea`\n"
            "–ò–ª–∏ –∑–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å - —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! üòä"
        )
        bot.messaging.send_message(peer, final_message)
        session.add_message(final_message, is_user=False)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ analyze_and_respond_idea: {e}")
        raise

def generate_and_send_files(peer, session: UserSession, data: dict, cost_info: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    try:
        word_path, excel_path = generate_files(data, cost_info)
        
        bot.messaging.send_message(peer, "üìé –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ñ–∞–π–ª—ã...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Word —Ñ–∞–π–ª
        if FileManager.send_file_with_retry(bot, peer, word_path, 
                                          name=os.path.basename(word_path), 
                                          text="üìÑ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"):
            logging.info("‚úÖ Word —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            bot.messaging.send_message(peer, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Word —Ñ–∞–π–ª")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
        if FileManager.send_file_with_retry(bot, peer, excel_path, 
                                          name=os.path.basename(excel_path), 
                                          text="üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
            logging.info("‚úÖ Excel —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            bot.messaging.send_message(peer, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Excel —Ñ–∞–π–ª")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            os.remove(word_path)
            os.remove(excel_path)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")
        bot.messaging.send_message(peer, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤")

def handle_owner_search(update: UpdateMessage, session: UserSession, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤"""
    peer = update.peer
    
    bot.messaging.send_message(peer, f"üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: \"{text}\"...")
    
    try:
        owners_info = find_agent_owners(text)
        bot.messaging.send_message(peer, owners_info)
        session.add_message(owners_info, is_user=False)
        
        session.mode = config['states']['main_menu']
        
        follow_up = (
            "\nüí° **–ù—É–∂–µ–Ω –µ—â–µ –ø–æ–∏—Å–∫?**\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ `/search_owners` –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å!"
        )
        bot.messaging.send_message(peer, follow_up)
        session.add_message(follow_up, is_user=False)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤: {e}")
        error_response = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}"
        bot.messaging.send_message(peer, error_response)
        session.add_message(error_response, is_user=False)
        session.mode = config['states']['main_menu']

def handle_idea_generation(update: UpdateMessage, session: UserSession, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π"""
    peer = update.peer
    
    bot.messaging.send_message(peer, "üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
    
    try:
        ideas_response = generate_idea_suggestions(text)
        
        full_response = (
            f"üí° **–ò–¥–µ–∏ –ø–æ —Ç–µ–º–µ \"{text}\":**\n\n{ideas_response}\n\n"
            "üîπ –ü–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∫–∞–∫–∞—è-—Ç–æ –∏–¥–µ—è? –ù–∞–ø–∏—à–∏—Ç–µ `/idea` –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏!\n"
            "üîπ –•–æ—Ç–∏—Ç–µ –µ—â–µ –∏–¥–µ–∏? –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥—É—é –æ–±–ª–∞—Å—Ç—å!"
        )
        
        bot.messaging.send_message(peer, full_response)
        session.add_message(full_response, is_user=False)
        
        session.mode = config['states']['main_menu']
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π: {e}")
        error_response = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π: {e}"
        bot.messaging.send_message(peer, error_response)
        session.add_message(error_response, is_user=False)
        session.mode = config['states']['main_menu']

def handle_general_conversation(update: UpdateMessage, session: UserSession, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
    peer = update.peer
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    if text.startswith('/'):
        handle_command(update, session, text)
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    try:
        gpt_response, is_maybe_idea, command = ResponseGenerator.generate_contextual_response(session, text)
        logging.info(f"üîé –ò–ò –æ—Ç–≤–µ—Ç: {gpt_response[:100]}..., –ò–¥–µ—è: {is_maybe_idea}, –ö–æ–º–∞–Ω–¥–∞: {command}")
        
        if command:
            # –ò–ò –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
            handle_ai_suggested_command(update, session, command)
            
        elif is_maybe_idea:
            # –ò–ò –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∏–¥–µ—é
            response = (
                f"{gpt_response}\n\n"
                "üí° **–≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏–¥–µ—é!**\n"
                "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—ë –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑? "
                "–ù–∞–ø–∏—à–∏—Ç–µ `/idea` –∏ –º—ã –µ—ë –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–µ–º!"
            )
            bot.messaging.send_message(peer, response)
            session.add_message(response, is_user=False)
            
        else:
            # –û–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥
            response = gpt_response or "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ ü§î"
            bot.messaging.send_message(peer, response)
            session.add_message(response, is_user=False)
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_general_conversation: {e}")
        fallback_response = (
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª ü§î\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π `/help`"
        )
        bot.messaging.send_message(peer, fallback_response)
        session.add_message(fallback_response, is_user=False)

def handle_command(update: UpdateMessage, session: UserSession, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
    command = text[1:].lower()
    
    command_handlers = {
        "start": start_handler,
        "idea": smart_idea_handler,
        "ai_agent": agent_handler,
        "group": search_owners_handler,
        "search_owners": search_owners_handler,
        "help_idea": help_idea_handler,
        "consultation": consultation_handler,
        "help": help_handler,
    }
    
    if command in command_handlers:
        command_handlers[command](update)
    else:
        help_text = (
        "‚ùì –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "‚Ä¢ `/start` ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ `/idea` ‚Äî –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∏–¥–µ—é (—à–∞–±–ª–æ–Ω / —Å–≤–æ–±–æ–¥–Ω–æ)\n"
        "‚Ä¢ `/ai_agent` ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ `/search_owners` ‚Äî –ø–æ–∏—Å–∫ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É\n"
        "‚Ä¢ `/help_idea` ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏ –ø–æ —Ç–µ–º–µ\n"
        "‚Ä¢ `/consultation` ‚Äî –∑–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
        "‚Ä¢ `/help` ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç ‚Äî —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
    )
    bot.messaging.send_message(peer, help_text)
    session.add_message(help_text, is_user=False)
    session.mode = config['states']['main_menu']


def handle_ai_suggested_command(update: UpdateMessage, session: UserSession, command: str):
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π –ò–ò.
    –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ '/command' –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ 'command'.
    """
    peer = update.peer
    cmd = command.strip()
    if cmd.startswith('/'):
        cmd = cmd[1:]

    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –Ω–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞
    safe_commands = {
        "start": start_handler,
        "idea": smart_idea_handler,
        "ai_agent": agent_handler,
        "search_owners": search_owners_handler,
        "help_idea": help_idea_handler,
        "consultation": consultation_handler,
        "help": help_handler,
    }

    if cmd in safe_commands:
        logging.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π –ò–ò: /{cmd}")
        safe_commands[cmd](update)
    else:
        bot.messaging.send_message(peer, f"–ò–ò –ø—Ä–µ–¥–ª–æ–∂–∏–ª –≤—ã–ø–æ–ª–Ω–∏—Ç—å `{command}`, –Ω–æ —Ç–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")


# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

def register_handlers(bot_instance: DialogBot):
    """
    –ü—Ä–∏–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ dialog_bot_sdk –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–æ–π API ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç –±–ª–æ–∫ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    """
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–ø–æ—Å–æ–± —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å MessageHandler ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ.
        bot_instance.add_message_handler(MessageHandler(enhanced_text_handler, MessageContentType.TEXT_MESSAGE))

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ SDK –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç CommandHandler)
        bot_instance.add_command_handler(CommandHandler(start_handler, 'start'))
        bot_instance.add_command_handler(CommandHandler(smart_idea_handler, 'idea'))
        bot_instance.add_command_handler(CommandHandler(agent_handler, 'ai_agent'))
        bot_instance.add_command_handler(CommandHandler(search_owners_handler, 'search_owners'))
        bot_instance.add_command_handler(CommandHandler(help_idea_handler, 'help_idea'))
        bot_instance.add_command_handler(CommandHandler(consultation_handler, 'consultation'))
        bot_instance.add_command_handler(CommandHandler(help_handler, 'help'))

        logging.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        # –ï—Å–ª–∏ API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥—Ä—É–≥–æ–µ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {e}")
        logging.info("–ï—Å–ª–∏ –≤–∞—à SDK –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ –≤—ã–∑–æ–≤ register_handlers —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º.")


def main():
    global bot
    if not BOT_TOKEN:
        logging.critical("DIALOG_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏. –û—Å—Ç–∞–Ω–æ–≤.")
        raise RuntimeError("DIALOG_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")

    bot = DialogBot(BOT_TOKEN)
    register_handlers(bot)

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    try:
        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç SDK ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –º–µ—Ç–æ–¥ run(), start_polling() –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–¥–æ–±–Ω–æ–µ.
        # –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω—É–∂–Ω—ã–π –≤—ã–∑–æ–≤. –ó–¥–µ—Å—å –æ–±—â–∏–π –ø—Ä–∏–º–µ—Ä:
        bot.run_forever()  # <- –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ bot.run() / bot.polling_loop() / bot.start() –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç SDK
    except AttributeError:
        # –ï—Å–ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ –Ω–µ—Ç run_forever ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
        try:
            bot.run()
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}")
            raise

if __name__ == "__main__":
    main()