import os
import re
from datetime import datetime
from difflib import SequenceMatcher
from openpyxl import Workbook, load_workbook
from openpyxl.styles import Font, Border, Side, Alignment
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
from dialog_bot_sdk.bot import DialogBot
from dialog_bot_sdk.entities.messaging import UpdateMessage, CommandHandler, MessageHandler, MessageContentType
from gigachat_wrapper import get_llm

# üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL-–ø—É—Ç–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è SberChat)
os.environ["REQUESTS_CA_BUNDLE"] = '/home/sigma.sbrf.ru@22754707/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/main_chat_bot/test/certs/SberCA.pem'
os.environ["GRPC_DEFAULT_SSL_ROOTS_FILE_PATH"] = '/home/sigma.sbrf.ru@22754707/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/main_chat_bot/test/certs/russiantrustedca.pem'

TEMPLATE_FIELDS = [
    "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ß—Ç–æ —Ö–æ—Ç–∏–º —É–ª—É—á—à–∏—Ç—å?", "–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≥–µ–Ω—Ç—É –Ω–∞ –≤—ã—Ö–æ–¥?",
    "–ö–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å–µ–π—á–∞—Å? as-is", "–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç –∞–≥–µ–Ω—Ç–∞?",
    "–î–æ—Å—Ç–∏–∂–∏–º—ã–π –∏–¥–µ–∞–ª(to-be)", "–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ—Ü–µ—Å—Å–∞"
]


def retrieve_similar_ideas(user_input: str, agents_data: list[str], threshold: float = 0.3) -> list[str]:
    similar = []
    for idea in agents_data:
        ratio = SequenceMatcher(None, user_input.lower(), idea.lower()).ratio()
        if ratio > threshold:
            similar.append(idea)
    return similar


def check_idea_with_gigachat_local(user_input: str, user_data: dict, is_free_form: bool = False) -> tuple[str, bool, dict]:
    try:
        wb = load_workbook("agents.xlsx", data_only=True)
        ws = wb.active
        all_agents_data = []

        for row in ws.iter_rows(min_row=2, values_only=True):
            if not row or not row[4]:
                continue

            block, ssp, owner, contact, name, short_name, desc, typ = row
            full_info = f"""–ë–ª–æ–∫: {block}
–°–°–ü: {ssp}
–í–ª–∞–¥–µ–ª–µ—Ü: {owner}
–ö–æ–Ω—Ç–∞–∫—Ç: {contact}
–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã: {name}
–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {short_name}
–û–ø–∏—Å–∞–Ω–∏–µ: {desc}
–¢–∏–ø: {typ}"""
            all_agents_data.append(full_info)

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ agents.xlsx: {e}")
        all_agents_data = []

    rag_context = retrieve_similar_ideas(user_input, all_agents_data)
    rag_context_text = "\n\n".join(rag_context) if rag_context else "–ù–∏—á–µ–≥–æ –ø–æ—Ö–æ–∂–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    if is_free_form:
        prompt = f"""
–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤ (RAG):
{rag_context_text}

1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ –∑–∞–ø–æ–ª–Ω–∏ —à–∞–±–ª–æ–Ω:
"–ù–∞–∑–≤–∞–Ω–∏–µ", "–ß—Ç–æ —Ö–æ—Ç–∏–º —É–ª—É—á—à–∏—Ç—å?", "–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≥–µ–Ω—Ç—É –Ω–∞ –≤—ã—Ö–æ–¥?",
"–ö–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å–µ–π—á–∞—Å? as-is", "–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç –∞–≥–µ–Ω—Ç–∞?",
"–î–æ—Å—Ç–∏–∂–∏–º—ã–π –∏–¥–µ–∞–ª(to-be)", "–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ—Ü–µ—Å—Å–∞"

–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Äî —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º.

–¢–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
\"\"\"{user_data['–û–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ']}`\"\"\" 

2. –°—Ä–∞–≤–Ω–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏:
- –ï—Å–ª–∏ –∏–¥–µ—è –ø–æ—Ö–æ–∂–∞ ‚Äî "–ù–ï —É–Ω–∏–∫–∞–ª—å–Ω–∞ + –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≤–ª–∞–¥–µ–ª–µ—Ü"
- –ï—Å–ª–∏ –Ω–æ–≤–∞—è ‚Äî "–£–Ω–∏–∫–∞–ª—å–Ω–∞", –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è
- –ï—Å–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é"
"""
    else:
        prompt = f"""
–í–æ—Ç –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
–ù–∞–∑–≤–∞–Ω–∏–µ: {user_data['–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã']}
–ß—Ç–æ —Ö–æ—Ç–∏–º —É–ª—É—á—à–∏—Ç—å?: {user_data['–ß—Ç–æ —Ö–æ—Ç–∏–º —É–ª—É—á—à–∏—Ç—å?']}
–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≥–µ–Ω—Ç—É –Ω–∞ –≤—ã—Ö–æ–¥?: {user_data['–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≥–µ–Ω—Ç—É –Ω–∞ –≤—ã—Ö–æ–¥?']}
–ö–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å–µ–π—á–∞—Å? as-is: {user_data['–ö–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å–µ–π—á–∞—Å? as-is']}
–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç –∞–≥–µ–Ω—Ç–∞?: {user_data['–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç –∞–≥–µ–Ω—Ç–∞?']}
–î–æ—Å—Ç–∏–∂–∏–º—ã–π –∏–¥–µ–∞–ª(to-be): {user_data['–î–æ—Å—Ç–∏–∂–∏–º—ã–π –∏–¥–µ–∞–ª(to-be)']}
–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ—Ü–µ—Å—Å–∞: {user_data['–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ—Ü–µ—Å—Å–∞']}

–ü–æ—Ö–æ–∂–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã (RAG):
{rag_context_text}

–°—Ä–∞–≤–Ω–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É —Å –Ω–∏–º–∏ –∏ –ø—Ä–∏–º–∏ —Ä–µ—à–µ–Ω–∏–µ: —É–Ω–∏–∫–∞–ª—å–Ω–∞ –∏–ª–∏ –Ω–µ—Ç?
"""

    raw_response = get_llm().invoke(prompt)
    response_text = str(raw_response).strip()

    is_unique = "—É–Ω–∏–∫–∞–ª—å–Ω–∞" in response_text.lower() and "–Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω–∞" not in response_text.lower()

    parsed_data = {}
    if is_free_form:
        for field in TEMPLATE_FIELDS:
            match = re.search(rf"{field}[:\-‚Äì]\s*(.+)", response_text, re.IGNORECASE)
            if match:
                parsed_data[field] = match.group(1).strip()

    return response_text, is_unique, parsed_data


def generate_files(data: dict):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    word_path = f"initiative_{timestamp}.docx"
    excel_path = f"initiative_{timestamp}.xlsx"

    doc = Document()
    title = doc.add_heading("–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ ‚Äî —à–∞–±–ª–æ–Ω", 0)
    title.alignment = WD_ALIGN_PARAGRAPH.CENTER

    for key, value in data.items():
        p = doc.add_paragraph()
        run = p.add_run(f"{key}:\n")
        run.bold = True
        run.font.size = Pt(14)
        run2 = p.add_run(f"{value}\n")
        run2.font.size = Pt(12)
        p.space_after = Pt(12)

    doc.save(word_path)

    wb = Workbook()
    ws = wb.active
    ws.title = "–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞"

    bold_font = Font(bold=True)
    thin_border = Border(
        left=Side(style="thin"), right=Side(style="thin"),
        top=Side(style="thin"), bottom=Side(style="thin")
    )
    alignment = Alignment(wrap_text=True, vertical="top")

    ws.append(["–ü–æ–ª–µ", "–ó–Ω–∞—á–µ–Ω–∏–µ"])
    for cell in ws[1]:
        cell.font = bold_font
        cell.border = thin_border
        cell.alignment = alignment

    for key, value in data.items():
        ws.append([key, value])
        for cell in ws[ws.max_row]:
            cell.border = thin_border
            cell.alignment = alignment

    ws.column_dimensions["A"].width = 30
    ws.column_dimensions["B"].width = 60
    wb.save(excel_path)

    return word_path, excel_path


# üß† –≠—Ö–æ –∏ —Å—Ç–∞—Ä—Ç-–∫–æ–º–∞–Ω–¥–∞
def text(message: UpdateMessage) -> None:
    bot.messaging.send_message(message.peer, f'Reply to: {message.message.text_message.text}')


def start(message: UpdateMessage) -> None:
    bot.messaging.send_message(message.peer, '–Ø –ø—Ä–æ—Å—Ç–æ–π —ç—Ö–æ-–±–æ—Ç. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞–º–∏!')


# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot = DialogBot.create_bot({
        "endpoint": "epbotsift.sberchat.sberbank.ru",
        "token": "58068397c86a2b216dadeb7d967965328b95278e",
        "is_secure": True,
    })

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.messaging.command_handler([CommandHandler(start, "start", description="–†–∞—Å—Å–∫–∞–∂—É –æ —Å–µ–±–µ")])
    bot.messaging.message_handler([MessageHandler(text, MessageContentType.TEXT_MESSAGE)])

    # –°—Ç–∞—Ä—Ç—É–µ–º —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.updates.on_updates(do_read_message=True, do_register_commands=True)
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
