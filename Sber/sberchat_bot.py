import os
import logging
from dotenv import load_dotenv
from dialog_bot_sdk.bot import DialogBot
from dialog_bot_sdk.updates.update_handler import UpdateHandler
from dialog_bot_sdk.entities.messaging import UpdateMessage
from dialog_bot_sdk.models import InteractiveMedia, InteractiveButton
from dialog_bot_sdk.entities.messaging import MessageContentType, MessageHandler, CommandHandler

from openpyxl import load_workbook
from ai_agent import check_idea_with_gigachat_local, generate_files

load_dotenv()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SSL
os.environ["REQUESTS_CA_BUNDLE"] = '/home/sigma.sbrf.ru@22754707/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/main_chat_bot/test/certs/SberCA.pem'
os.environ["GRPC_DEFAULT_SSL_ROOTS_FILE_PATH"] = '/home/sigma.sbrf.ru@22754707/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/main_chat_bot/test/certs/russiantrustedca.pem'

BOT_TOKEN = os.getenv("DIALOG_BOT_TOKEN")

TEMPLATE_FIELDS = [
    "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ß—Ç–æ —Ö–æ—Ç–∏–º —É–ª—É—á—à–∏—Ç—å?", "–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≥–µ–Ω—Ç—É –Ω–∞ –≤—ã—Ö–æ–¥?",
    "–ö–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å–µ–π—á–∞—Å? as-is", "–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç –∞–≥–µ–Ω—Ç–∞?",
    "–î–æ—Å—Ç–∏–∂–∏–º—ã–π –∏–¥–µ–∞–ª(to-be)", "–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ—Ü–µ—Å—Å–∞"
]

user_states = {}
agent_query_state = {}

class BotHandler(UpdateHandler):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot

    def on_message(self, peer, sender, message_text):
        user_id = sender.uid
        msg = message_text.strip()

        self.bot.messaging.send_message(
            peer,
            "üëã –ü—Ä–∏–≤–µ—Ç, @lucas_no_way! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∏–¥–µ—è–º–∏ –¥–ª—è AI-–∞–≥–µ–Ω—Ç–æ–≤. –í—ã–±–µ—Ä–∏, —á—Ç–æ –º—ã –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å:",
            [InteractiveMedia(
                actions=[
                    InteractiveButton("–£ –º–µ–Ω—è –µ—Å—Ç—å –∏–¥–µ—è!üíå", "–£ –º–µ–Ω—è –µ—Å—Ç—å –∏–¥–µ—è!üíå"),
                    InteractiveButton("–ê–ò-–∞–≥–µ–Ω—Ç—ã?üìç", "–ê–ò-–∞–≥–µ–Ω—Ç—ã?üìç"),
                    InteractiveButton("–ö—Ç–æ –ø–æ–º–æ–∂–µ—Ç?üí¨", "–ö—Ç–æ –ø–æ–º–æ–∂–µ—Ç?üí¨"),
                    InteractiveButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞üìù", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞üìù"),
                ]
            )]
        )

        if msg == "–£ –º–µ–Ω—è –µ—Å—Ç—å –∏–¥–µ—è!üíå":
            user_states[user_id] = {
                "mode": "choose",
                "step": None,
                "data": {},
                "giga_mode": False
            }
            self.bot.messaging.send_message(
                peer,
                "üìù –ö–∞–∫ —Ö–æ—Ç–∏—Ç–µ –æ–ø–∏—Å–∞—Ç—å –∏–¥–µ—é?",
                [InteractiveMedia(
                    actions=[
                        InteractiveButton("–î–∞–≤–∞–π —à–∞–±–ª–æ–Ω!"),
                        InteractiveButton("–Ø –º–æ–≥—É –∏ —Å–∞–º –Ω–∞–ø–∏—Å–∞—Ç—å"),
                    ]
                )]
            )
            return

        if user_id in user_states and user_states[user_id].get("mode") == "choose":
            if msg.lower() in ("—à–∞–±–ª–æ–Ω", "–ø–æ —à–∞–±–ª–æ–Ω—É"):
                user_states[user_id]["mode"] = "template"
                user_states[user_id]["step"] = 0
                user_states[user_id]["data"] = {}
                self.bot.messaging.send_message(peer, f"1‚É£ {TEMPLATE_FIELDS[0]}:")
            elif msg.lower() in ("—Å–≤–æ–±–æ–¥–Ω–æ", "—Å–≤–æ–±–æ–¥–Ω–∞—è —Ñ–æ—Ä–º–∞"):
                user_states[user_id]["mode"] = "freeform"
                self.bot.messaging.send_message(peer, "üìù –û–ø–∏—à–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ:")
            else:
                self.bot.messaging.send_message(peer, "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: —à–∞–±–ª–æ–Ω –∏–ª–∏ —Å–≤–æ–±–æ–¥–Ω–æ.")
            return

        if user_states.get(user_id, {}).get("mode") == "freeform":
            idea_text = msg
            self.bot.messaging.send_message(peer, "üîç –ü—Ä–æ–≤–µ—Ä—è—é —á–µ—Ä–µ–∑ GigaChat...")
            result, is_unique, parsed_data = check_idea_with_gigachat_local(
                idea_text,
                {"–û–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ": idea_text},
                is_free_form=True
            )
            self.bot.messaging.send_message(peer, f"ü§ñ –û—Ç–≤–µ—Ç GigaChat:\n\n{result}")
            if is_unique:
                self.bot.messaging.send_message(peer, "‚úÖ –ò–¥–µ—è —É–Ω–∏–∫–∞–ª—å–Ω–∞!")
                if parsed_data:
                    word_path, excel_path = generate_files(parsed_data)
                    with open(word_path, "rb") as doc_file:
                        self.bot.messaging.send_file(peer, doc_file.read(), word_path)
                    with open(excel_path, "rb") as excel_file:
                        self.bot.messaging.send_file(peer, excel_file.read(), excel_path)
                    os.remove(word_path)
                    os.remove(excel_path)
                else:
                    self.bot.messaging.send_message(peer, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤.")
            else:
                self.bot.messaging.send_message(peer, "‚ö†Ô∏è –ò–¥–µ—è –Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω–∞ –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω–∞.")
            user_states.pop(user_id)
            return

        if user_states.get(user_id, {}).get("mode") == "template":
            state = user_states[user_id]
            step = state["step"]
            if step is not None and step < len(TEMPLATE_FIELDS):
                field = TEMPLATE_FIELDS[step]
                state["data"][field] = msg
                state["step"] += 1

                if state["step"] < len(TEMPLATE_FIELDS):
                    next_field = TEMPLATE_FIELDS[state["step"]]
                    self.bot.messaging.send_message(peer, f"{state['step'] + 1}‚É£ {next_field}:")
                else:
                    self.bot.messaging.send_message(peer, "üîç –ü—Ä–æ–≤–µ—Ä—è—é —á–µ—Ä–µ–∑ GigaChat...")
                    data = {
                        "–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã": state["data"].get("–ù–∞–∑–≤–∞–Ω–∏–µ", ""),
                        "–ß—Ç–æ —Ö–æ—Ç–∏–º —É–ª—É—á—à–∏—Ç—å?": state["data"].get("–ß—Ç–æ —Ö–æ—Ç–∏–º —É–ª—É—á—à–∏—Ç—å?", ""),
                        "–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≥–µ–Ω—Ç—É –Ω–∞ –≤—ã—Ö–æ–¥?": state["data"].get("–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≥–µ–Ω—Ç—É –Ω–∞ –≤—ã—Ö–æ–¥?", ""),
                        "–ö–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å–µ–π—á–∞—Å? as-is": state["data"].get("–ö–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å–µ–π—á–∞—Å? as-is", ""),
                        "–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç –∞–≥–µ–Ω—Ç–∞?": state["data"].get("–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç –∞–≥–µ–Ω—Ç–∞?", ""),
                        "–î–æ—Å—Ç–∏–∂–∏–º—ã–π –∏–¥–µ–∞–ª(to-be)": state["data"].get("–î–æ—Å—Ç–∏–∂–∏–º—ã–π –∏–¥–µ–∞–ª(to-be)", ""),
                        "–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ—Ü–µ—Å—Å–∞": state["data"].get("–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ—Ü–µ—Å—Å–∞", "")
                    }
                    result, is_unique, _ = check_idea_with_gigachat_local("", data)
                    self.bot.messaging.send_message(peer, f"ü§ñ –û—Ç–≤–µ—Ç GigaChat:\n\n{result}")
                    if is_unique:
                        self.bot.messaging.send_message(peer, "‚úÖ –ò–¥–µ—è —É–Ω–∏–∫–∞–ª—å–Ω–∞! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
                        word_path, excel_path = generate_files(data)
                        with open(word_path, "rb") as doc_file:
                            self.bot.messaging.send_file(peer, doc_file.read(), word_path)
                        with open(excel_path, "rb") as excel_file:
                            self.bot.messaging.send_file(peer, excel_file.read(), excel_path)
                        os.remove(word_path)
                        os.remove(excel_path)
            return

        if msg == "–ê–ò-–∞–≥–µ–Ω—Ç—ã?üìç":
            self.bot.messaging.send_message(
                peer,
                "üìã –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                [InteractiveMedia(
                    actions=[
                        InteractiveButton("–í—Å–µ –∞–≥–µ–Ω—Ç—ã", "–≤—Å–µ –∞–≥–µ–Ω—Ç—ã"),
                        InteractiveButton("–ò—Å–∫–∞—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", "–∏—Å–∫–∞—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"),
                    ]
                )]
            )
            return

        if msg.lower() == "–≤—Å–µ –∞–≥–µ–Ω—Ç—ã":
            try:
                with open("agents.xlsx", "rb") as f:
                    self.bot.messaging.send_file(peer, f.read(), "agents.xlsx")
            except Exception as e:
                self.bot.messaging.send_message(peer, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e}")
            return

        if msg.lower() == "–∏—Å–∫–∞—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é":
            agent_query_state[user_id] = True
            self.bot.messaging.send_message(peer, "üîç –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞:")
            return

        if agent_query_state.get(user_id):
            agent_query_state[user_id] = False
            term = msg.lower()
            try:
                wb = load_workbook("agents.xlsx")
                ws = wb.active
                results = [r for r in ws.iter_rows(min_row=2, values_only=True) if term in (r[0] or '').lower()]
                if not results:
                    self.bot.messaging.send_message(peer, "‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                else:
                    for r in results:
                        name, team, contact, desc = r
                        self.bot.messaging.send_message(
                            peer,
                            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n–ö–æ–º–∞–Ω–¥–∞: {team}\n–ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n–û–ø–∏—Å–∞–Ω–∏–µ: {desc}"
                        )
            except Exception as e:
                self.bot.messaging.send_message(peer, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            return

        if msg == "–ö—Ç–æ –ø–æ–º–æ–∂–µ—Ç?üí¨":
            self.bot.messaging.send_message(peer, "üßë‚Äçüíª –ü–æ–∫–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
            return

        if msg == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞üìù":
            self.bot.messaging.send_message(peer, "‚úâÔ∏è –ù–∞–ø–∏—à–∏ –Ω–∞–º")
            return

        self.bot.messaging.send_message(peer, "ü§ñ –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é!")

def text_handler(message: UpdateMessage) -> None:
    bot.messaging.send_message(message.peer, f"üîÅ –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message.message.text_message.text}")

def start_handler(message: UpdateMessage) -> None:
    bot.messaging.send_message(message.peer, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —ç—Ö–æ-–±–æ—Ç, –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∏–¥–µ—è–º–∏!")

def main():
    global bot
    bot = DialogBot.create_bot({
        "endpoint": "epbotsift.sberchat.sberbank.ru",
        "token": "58068397c86a2b216dadeb7d967965328b95278e",
        "is_secure": True,
    })

    handler = BotHandler(bot)
    bot.updates.set_update_handler(handler)

    bot.messaging.command_handler([
        CommandHandler(start_handler, "start", description="–ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è"),
    ])
    bot.messaging.message_handler([
        MessageHandler(text_handler, MessageContentType.TEXT_MESSAGE),
    ])

    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    while True:
        pass

if __name__ == "__main__":
    main()
