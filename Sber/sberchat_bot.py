import os
import json
import logging
from dotenv import load_dotenv
from dialog_bot_sdk.bot import DialogBot
from dialog_bot_sdk.entities.messaging import UpdateMessage, MessageContentType
from dialog_bot_sdk.entities.messaging import MessageHandler, CommandHandler
from dialog_bot_sdk.entities.messaging import UpdateMessage

from openpyxl import load_workbook, Workbook

from ai_agent import (
    check_general_message_with_gigachat,
    check_idea_with_gigachat_local,
    generate_files,
    generate_agents_summary_file,
    find_agent_owners,
    generate_idea_suggestions,
    calculate_work_cost,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('config.json', 'r', encoding='utf-8') as f:
    config = json.load(f)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–µ–π –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
os.environ["REQUESTS_CA_BUNDLE"] = config['file_settings']['certificates']['requests_ca_bundle']
os.environ["GRPC_DEFAULT_SSL_ROOTS_FILE_PATH"] = config['file_settings']['certificates']['grpc_roots']

BOT_TOKEN = os.getenv("DIALOG_BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=config['logging']['level'],
    format=config['logging']['format'],
    filename=config['logging']['file']
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_states = {}
bot = None

def send_file_sync(peer, file_path, text=None, name=None):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ —á–∞—Ç —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API"""
    try:
        logging.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª: {name or file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if os.path.exists(file_path):
            file_size = os.path.getsize(file_path)
            logging.info(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
            
            if file_size == 0:
                logging.warning("‚ö†Ô∏è –§–∞–π–ª –ø—É—Å—Ç!")
                return None
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –±–∞–π—Ç—ã
        with open(file_path, "rb") as f:
            file_bytes = f.read()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏
        result = bot.messaging.send_file_sync(
            peer=peer,
            file=file_bytes,
            text=text,
            name=name or os.path.basename(file_path),
            is_forward_ban=True
        )
        
        logging.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {result}")
        return result
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

def start_handler(update: UpdateMessage) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.peer.id
    user_states[user_id] = {"mode": config['states']['main_menu']}
    bot.messaging.send_message(update.peer, config['bot_settings']['commands']['start']['response'])

def idea_handler(update: UpdateMessage) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–¥–µ—è–º–∏"""
    peer = update.peer
    user_id = peer.id
    
    if user_id in user_states and user_states[user_id].get("mode", "").startswith("idea_"):
        bot.messaging.send_message(peer, config['error_messages']['already_in_process'])
        return
    
    user_states[user_id] = {
        "mode": config['states']['idea_choose_format'],
        "current_field": 0,
        "idea_data": {}
    }
    bot.messaging.send_message(peer, config['bot_settings']['commands']['idea']['responses']['initial'])

def agent_handler(update: UpdateMessage) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ AI-–∞–≥–µ–Ω—Ç–æ–≤"""
    peer = update.peer
    
    try:
        agents_file_path = config['file_settings']['agents_file']
        if not os.path.exists(agents_file_path):
            bot.messaging.send_message(peer, config['bot_settings']['commands']['ai_agent']['responses']['file_not_found'])
            wb = Workbook()
            ws = wb.active
            ws.append(["–ë–ª–æ–∫", "–°–°–ü", "–í–ª–∞–¥–µ–ª–µ—Ü", "–ö–æ–Ω—Ç–∞–∫—Ç", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ", "–¢–∏–ø"])
            wb.save(agents_file_path)
        
        summary_file = generate_agents_summary_file(agents_file_path)
        
        bot.messaging.send_message(peer, config['bot_settings']['commands']['ai_agent']['responses']['initial'])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
        result1 = send_file_sync(peer, agents_file_path, text="üìã –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å –∞–≥–µ–Ω—Ç–∞–º–∏", name="agents.xlsx")
        if not result1:
            bot.messaging.send_message(peer, config['bot_settings']['commands']['ai_agent']['responses']['file_error'].format(file_type="–æ—Å–Ω–æ–≤–Ω–æ–π"))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å–æ–∑–¥–∞–Ω
        if summary_file and os.path.exists(summary_file):
            result2 = send_file_sync(peer, summary_file, text="üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç", name=os.path.basename(summary_file))
            if not result2:
                bot.messaging.send_message(peer, config['bot_settings']['commands']['ai_agent']['responses']['file_error'].format(file_type="–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π"))
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(summary_file)
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ agent_handler: {e}")
        bot.messaging.send_message(peer, config['error_messages']['file_error'].format(error=e))

def search_owners_handler(update: UpdateMessage) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É agents.xlsx"""
    peer = update.peer
    user_id = peer.id

    try:
        agents_file_path = config['file_settings']['agents_file']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞
        if not os.path.exists(agents_file_path):
            bot.messaging.send_message(peer, config['error_messages']['file_not_found'])
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º Excel
        wb = load_workbook(agents_file_path)
        sheet = wb.active

        # –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [cell.value for cell in sheet[1]]

        # –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        agents_data = []
        for row in sheet.iter_rows(min_row=2, values_only=True):
            row_dict = dict(zip(headers, row))
            agents_data.append(row_dict)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = {
            "mode": config['states']['search_owners'],
            "agents_data": agents_data
        }

        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        bot.messaging.send_message(
            peer,
            f"–§–∞–π–ª {os.path.basename(agents_file_path)} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:\n"
            "‚Ä¢ all ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫\n"
            "‚Ä¢ <–∏–º—è –∞–≥–µ–Ω—Ç–∞> ‚Äî –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ search_owners_handler: {e}")
        bot.messaging.send_message(peer, config['error_messages']['general_error'].format(error=e))

def help_idea_handler(update: UpdateMessage) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–º–æ—â–∏ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–¥–µ–π"""
    peer = update.peer
    user_id = peer.id
    
    user_states[user_id] = {"mode": config['states']['help_with_ideas']}
    bot.messaging.send_message(peer, config['bot_settings']['commands']['help_idea']['responses']['initial'])

def consultation_handler(update: UpdateMessage) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Å—ã–ª–æ–∫"""
    peer = update.peer
    user_id = peer.id
    
    user_states[user_id] = {"mode": config['states']['main_menu']}
    bot.messaging.send_message(peer, config['bot_settings']['commands']['consultation']['response'])

def help_handler(update: UpdateMessage) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏"""
    bot.messaging.send_message(update.peer, config['bot_settings']['commands']['help']['response'])

def process_template_idea(update: UpdateMessage, user_id: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–¥–µ–∏ –ø–æ —à–∞–±–ª–æ–Ω—É (–ø–æ—ç—Ç–∞–ø–Ω–æ)"""
    peer = update.peer
    text = update.message.text_message.text.strip()
    
    state = user_states[user_id]
    current_field = state["current_field"]
    
    if current_field > 0:
        field_name = config['template_fields'][current_field - 1]
        state["idea_data"][field_name] = text
    
    if current_field < len(config['template_fields']):
        field_name = config['template_fields'][current_field]
        bot.messaging.send_message(peer, config['bot_settings']['commands']['idea']['responses']['template_field'].format(field=field_name))
        state["current_field"] += 1
    else:
        bot.messaging.send_message(peer, config['bot_settings']['commands']['idea']['responses']['complete'])
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º user_id –≤ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
            state["idea_data"]["user_id"] = user_id
            
            response, is_unique, parsed_data, _ = check_idea_with_gigachat_local(
                text, state["idea_data"], is_free_form=False
            )
            
            cost_info = calculate_work_cost(state["idea_data"], is_unique)
            full_response = f"üß† **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:**\n\n{response}\n\nüí∞ **–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:**\n{cost_info}"
            bot.messaging.send_message(peer, full_response)
            
            if state["idea_data"]:
                word_path, excel_path = generate_files(state["idea_data"], cost_info)
                bot.messaging.send_message(peer, config['bot_settings']['commands']['idea']['responses']['files_ready'])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Word —Ñ–∞–π–ª
                result1 = send_file_sync(peer, word_path, text="üìÑ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", name=os.path.basename(word_path))
                if not result1:
                    bot.messaging.send_message(peer, config['error_messages']['file_error'].format(error="Word"))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
                result2 = send_file_sync(peer, excel_path, text="üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", name=os.path.basename(excel_path))
                if not result2:
                    bot.messaging.send_message(peer, config['error_messages']['file_error'].format(error="Excel"))
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                try:
                    os.remove(word_path)
                    os.remove(excel_path)
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")
            
            user_states[user_id] = {"mode": config['states']['main_menu']}
            bot.messaging.send_message(peer, "\nüîÑ –î–ª—è –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ `/start`")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à–∞–±–ª–æ–Ω–Ω–æ–π –∏–¥–µ–∏: {e}")
            bot.messaging.send_message(peer, config['error_messages']['analysis_error'].format(error=e))
            user_states[user_id] = {"mode": config['states']['main_menu']}

def text_handler(update: UpdateMessage, widget=None):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.message or not update.message.text_message:
        return

    text = update.message.text_message.text.strip()
    user_id = update.peer.id
    peer = update.peer
    state = user_states.get(user_id, {"mode": config['states']['main_menu']})
    
    logging.info(f"üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {text}")
    logging.info(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")

    if state["mode"] == config['states']['idea_choose_format']:
        if "—à–∞–±–ª–æ–Ω" in text.lower():
            state["mode"] = config['states']['idea_template']
            state["current_field"] = 0
            state["idea_data"] = {}
            process_template_idea(update, user_id)
            return
        elif "—Å–∞–º" in text.lower():
            state["mode"] = config['states']['idea_free_form']
            bot.messaging.send_message(peer, config['bot_settings']['commands']['idea']['responses']['free_form_prompt'])
            return
        else:
            bot.messaging.send_message(peer, config['bot_settings']['commands']['idea']['responses']['template_choice_error'])
            return
    
    elif state["mode"] == config['states']['idea_template']:
        process_template_idea(update, user_id)
        return
    
    elif state["mode"] == config['states']['idea_free_form']:
        bot.messaging.send_message(peer, config['bot_settings']['commands']['idea']['responses']['processing'])
        
        try:
            user_data = {"–û–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ": text, "user_id": user_id}
            response, is_unique, parsed_data, _ = check_idea_with_gigachat_local(
                text, user_data, is_free_form=True
            )
            
            cost_info = calculate_work_cost(parsed_data or user_data, is_unique)
            full_response = f"üß† **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:**\n\n{response}\n\nüí∞ **–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:**\n{cost_info}"
            bot.messaging.send_message(peer, full_response)
            
            if parsed_data:
                word_path, excel_path = generate_files(parsed_data, cost_info)
                bot.messaging.send_message(peer, config['bot_settings']['commands']['idea']['responses']['files_ready'])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Word —Ñ–∞–π–ª
                result1 = send_file_sync(peer, word_path, text="üìÑ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", name=os.path.basename(word_path))
                if not result1:
                    bot.messaging.send_message(peer, config['error_messages']['file_error'].format(error="Word"))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
                result2 = send_file_sync(peer, excel_path, text="üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", name=os.path.basename(excel_path))
                if not result2:
                    bot.messaging.send_message(peer, config['error_messages']['file_error'].format(error="Excel"))
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                try:
                    os.remove(word_path)
                    os.remove(excel_path)
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")
            
            user_states[user_id] = {"mode": config['states']['main_menu']}
            bot.messaging.send_message(peer, "\nüîÑ –î–ª—è –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ `/start`")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–≤–æ–±–æ–¥–Ω–æ–π –∏–¥–µ–∏: {e}")
            bot.messaging.send_message(peer, config['error_messages']['analysis_error'].format(error=e))
            user_states[user_id] = {"mode": config['states']['main_menu']}
        return
    
    elif state["mode"] == config['states']['search_owners']:
        bot.messaging.send_message(peer, config['bot_settings']['commands']['search_owners']['responses']['searching'])
        
        try:
            owners_info = find_agent_owners(text)
            bot.messaging.send_message(peer, owners_info)
            
            user_states[user_id] = {"mode": config['states']['main_menu']}
            bot.messaging.send_message(peer, config['bot_settings']['commands']['search_owners']['responses']['new_search'])
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤: {e}")
            bot.messaging.send_message(peer, config['error_messages']['general_error'].format(error=e))
            user_states[user_id] = {"mode": config['states']['main_menu']}
        return

    elif state["mode"] == config['states']['help_with_ideas']:
        bot.messaging.send_message(peer, config['bot_settings']['commands']['help_idea']['responses']['generating'])
        
        try:
            ideas_response = generate_idea_suggestions(text)
            bot.messaging.send_message(peer, config['bot_settings']['commands']['help_idea']['responses']['result'].format(ideas=ideas_response))
            bot.messaging.send_message(peer, "\nüîπ –ü–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∫–∞–∫–∞—è-—Ç–æ –∏–¥–µ—è? –ù–∞–ø–∏—à–∏—Ç–µ `/idea` —á—Ç–æ–±—ã –¥–µ—Ç–∞–ª—å–Ω–æ –µ—ë –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å!")
            
            user_states[user_id] = {"mode": config['states']['main_menu']}
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π: {e}")
            bot.messaging.send_message(peer, config['error_messages']['general_error'].format(error=e))
            user_states[user_id] = {"mode": config['states']['main_menu']}
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    try:
        if text.startswith('/'):
            command = text[1:].lower()
            cmd_config = config['bot_settings']['commands']
            
            if command == "start":
                start_handler(update)
            elif command == "idea":
                idea_handler(update)
            elif command == "ai_agent":
                agent_handler(update)
            elif command in ["group", "search_owners"]:
                search_owners_handler(update)
            elif command == "help_idea":
                help_idea_handler(update)
            elif command == "consultation":
                consultation_handler(update)
            elif command == "help":
                help_handler(update)
            else:
                bot.messaging.send_message(peer, config['error_messages']['unknown_command'])
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–∞–π–ª–∞
        gpt_response, command = check_general_message_with_gigachat(text, user_id)
        logging.info(f"üîé –û—Ç–≤–µ—Ç GigaChat: {gpt_response}, CMD: {command}")

        if command:
            if command == "help":
                help_handler(update)
            elif command == "start":
                start_handler(update)
            elif command == "ai_agent":
                agent_handler(update)
            elif command == "search_owners":
                search_owners_handler(update)
            elif command == "idea":
                idea_handler(update)
            elif command == "help_idea":
                help_idea_handler(update)
            elif command == "consultation":
                consultation_handler(update)
            else:
                bot.messaging.send_message(peer, gpt_response or config['error_messages']['not_understood'])
        else:
            bot.messaging.send_message(peer, gpt_response or config['error_messages']['not_understood'])
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ text_handler: {e}")
        bot.messaging.send_message(peer, config['error_messages']['general_error'].format(error=e))

def main():
    global bot
    bot = DialogBot.create_bot({
        "endpoint": config['bot_settings']['endpoint'],
        "token": BOT_TOKEN,
        "is_secure": config['bot_settings']['is_secure'],
    })

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    handlers = []
    for cmd, cmd_data in config['bot_settings']['commands'].items():
        handler_func = globals()[cmd_data['handler']]
        handlers.append(CommandHandler(handler_func, cmd))
        if 'aliases' in cmd_data:
            for alias in cmd_data['aliases']:
                handlers.append(CommandHandler(handler_func, alias))
    
    bot.messaging.command_handler(handlers)
    bot.messaging.message_handler([
        MessageHandler(text_handler, MessageContentType.TEXT_MESSAGE)
    ])

    bot.updates.on_updates(do_read_message=True, do_register_commands=True)

if __name__ == "__main__":
    main()