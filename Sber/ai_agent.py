import re
import os
from datetime import datetime
from openpyxl import Workbook, load_workbook
from openpyxl.styles import Font, Border, Side, Alignment, PatternFill
from openpyxl.chart import BarChart, Reference
from docx import Document
from docx.shared import Pt, Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.shared import RGBColor
from gigachat_wrapper import get_llm

import logging
import json
from collections import defaultdict, deque
import matplotlib.pyplot as plt
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("gigachat.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

gigachat_memory = defaultdict(lambda: deque(maxlen=15))  # –£–≤–µ–ª–∏—á–µ–Ω —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏

def clean_response_text(text: str) -> str:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∫–æ–¥–∏—Ä–æ–≤–æ–∫"""
    if not isinstance(text, str):
        text = str(text)
    
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —á—Ç–æ –∏–¥–µ—Ç –ø–æ—Å–ª–µ 'content=' –¥–æ –ø–µ—Ä–≤–æ–π –∫–∞–≤—ã—á–∫–∏
    if 'content=' in text:
        match = re.search(r"content=['\"]([^'\"]*)['\"]", text)
        if match:
            text = match.group(1)
        else:
            # –ï—Å–ª–∏ –∫–∞–≤—ã—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –±–µ—Ä–µ–º –≤—Å–µ –ø–æ—Å–ª–µ content=
            text = re.sub(r".*content=", "", text)
            text = re.sub(r"\s+additional_kwargs=.*$", "", text, flags=re.DOTALL)
    
    # –£–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    text = re.sub(r"\s*additional_kwargs=.*$", "", text, flags=re.DOTALL)
    text = re.sub(r"\s*response_metadata=.*$", "", text, flags=re.DOTALL)
    text = re.sub(r"\s*id=.*$", "", text, flags=re.DOTALL)
    text = re.sub(r"\s*usage_metadata=.*$", "", text, flags=re.DOTALL)
    
    # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ JSON –∫–æ–º–∞–Ω–¥—ã
    text = re.sub(r'ACTION:\s*\{[^}]+\}', '', text)
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º UTF-8 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    try:
        if isinstance(text, bytes):
            text = text.decode('utf-8')
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ √ê√ê¬æ√ë√ê¬æ√ê¬∂√ê¬µ)
        try:
            if '√ê' in text or '√ë' in text:
                text = text.encode('latin-1').decode('utf-8')
        except:
            pass
            
    except Exception:
        pass
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ª–∏—Ç–µ—Ä–∞–ª—ã \n –≤ –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
    text = text.replace('\\n', '\n')
    text = text.replace('\\t', '\t')
    text = text.replace('\\"', '"')
    text = text.replace("\\'", "'")
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–µ—à–∏
    text = re.sub(r'\\(?![nrt"\'])', '', text)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ -- –∏ ##
    text = re.sub(r'\s*--\s*', ' ‚Äì ', text)
    text = re.sub(r'\s*##\s*', '\n\n', text)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    text = text.strip()
    
    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    text = re.sub(r'\n\s*\n\s*\n', '\n\n', text)
    
    return text

def load_agents_data() -> list[dict]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≥–µ–Ω—Ç–∞—Ö –∏–∑ —Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        agents_file = "agents.xlsx"
        
        if not os.path.exists(agents_file):
            logging.warning(f"‚ö†Ô∏è –§–∞–π–ª {agents_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []
            
        wb = load_workbook(agents_file, data_only=True)
        ws = wb.active
        agents_data = []

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [cell.value for cell in ws[1] if cell.value]
        if len(headers) < 8:
            logging.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ñ–∞–π–ª–µ –∞–≥–µ–Ω—Ç–æ–≤. –ù–∞–π–¥–µ–Ω–æ: {len(headers)}")
            return []

        for row_num, row in enumerate(ws.iter_rows(min_row=2, values_only=True), start=2):
            if not row or not any(row):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –Ω–∞–∑–≤–∞–Ω–∏–µ
            if not row[4]:  # –ò–Ω–¥–µ–∫—Å 4 - —ç—Ç–æ "–ù–∞–∑–≤–∞–Ω–∏–µ"
                logging.debug(f"–ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏ {row_num}: –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞")
                continue
            
            try:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–Ω–¥–µ–∫—Å–æ–≤
                values = list(row) + [None] * (8 - len(row))  # –î–æ–ø–æ–ª–Ω—è–µ–º –¥–æ 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                
                block, ssp, owner, contact, name, short_name, desc, typ = values[:8]
                
                agent_info = {
                    "block": str(block) if block else "",
                    "ssp": str(ssp) if ssp else "",
                    "owner": str(owner) if owner else "",
                    "contact": str(contact) if contact else "",
                    "name": str(name) if name else "",
                    "short_name": str(short_name) if short_name else "",
                    "description": str(desc) if desc else "",
                    "type": str(typ) if typ else ""
                }
                agents_data.append(agent_info)
                
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {row_num}: {e}")
                continue

        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(agents_data)}")
        return agents_data
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ agents.xlsx: {e}")
        return []

def create_agent_utility_chart(agents_data: list[dict]) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
    try:
        if not agents_data:
            logging.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã")
            return None
            
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–µ—Ä–≤—ã–µ 8)
        agents_sample = agents_data[:8]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é GigaChat
        agents_descriptions = []
        for agent in agents_sample:
            agents_descriptions.append(f"- {agent['name']}: {agent['description'][:200]}...")
            
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏—Ö AI-–∞–≥–µ–Ω—Ç–æ–≤ –∏ –æ—Ü–µ–Ω–∏ –∏—Ö –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –æ—Ç 1 –¥–æ 10:

        {chr(10).join(agents_descriptions)}
        
        –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–∞–π –æ—Ü–µ–Ω–∫—É –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
        1. –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ (1-10)
        2. –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (1-10)  
        3. –ü—Ä–æ—Å—Ç–æ—Ç–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è (1-10)
        4. –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å (1-10)
        5. ROI –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª (1-10)
        
        –û—Ç–≤–µ—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
        –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞|–æ—Ü–µ–Ω–∫–∞1|–æ—Ü–µ–Ω–∫–∞2|–æ—Ü–µ–Ω–∫–∞3|–æ—Ü–µ–Ω–∫–∞4|–æ—Ü–µ–Ω–∫–∞5
        
        –ù–∞–ø—Ä–∏–º–µ—Ä:
        –ê–≥–µ–Ω—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞|8|7|6|9|8
        """
        
        logging.info(f"[GigaChat Chart] –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è {len(agents_sample)} –∞–≥–µ–Ω—Ç–æ–≤")
        raw_response = get_llm().invoke(prompt)
        response = clean_response_text(raw_response)
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        agent_ratings = {}
        lines = response.split('\n')
        
        for line in lines:
            if '|' in line and line.count('|') >= 5:
                parts = line.split('|')
                if len(parts) >= 6:
                    name = parts[0].strip()
                    try:
                        ratings = [int(parts[i].strip()) for i in range(1, 6)]
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–æ–∫
                        if all(1 <= rating <= 10 for rating in ratings):
                            agent_ratings[name] = ratings
                    except (ValueError, IndexError):
                        continue
        
        # Fallback - —Å–æ–∑–¥–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –æ–ø–∏—Å–∞–Ω–∏–π
        if not agent_ratings:
            logging.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ fallback –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã")
            for agent in agents_sample:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
                desc_lower = agent['description'].lower()
                
                # –ë–∞–∑–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏
                time_saving = 7
                quality = 6
                implementation = 5
                scalability = 6
                roi = 6
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                if any(word in desc_lower for word in ['–∞–≤—Ç–æ–º–∞—Ç', '–±—ã—Å—Ç—Ä', '–º–≥–Ω–æ–≤–µ–Ω–Ω']):
                    time_saving += 2
                if any(word in desc_lower for word in ['—Ç–æ—á–Ω', '–∫–∞—á–µ—Å—Ç–≤', '–Ω–∞–¥–µ–∂–Ω']):
                    quality += 2
                if any(word in desc_lower for word in ['–ø—Ä–æ—Å—Ç', '–ª–µ–≥–∫', '–∏–Ω—Ç—É–∏—Ç–∏–≤–Ω']):
                    implementation += 2
                if any(word in desc_lower for word in ['–º–∞—Å—à—Ç–∞–±', '—Ä–∞—Å—à–∏—Ä', '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω']):
                    scalability += 2
                if any(word in desc_lower for word in ['—ç–∫–æ–Ω–æ–º', '–ø—Ä–∏–±—ã–ª', '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω']):
                    roi += 2
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                ratings = [min(10, max(4, rating)) for rating in [time_saving, quality, implementation, scalability, roi]]
                agent_ratings[agent['name']] = ratings
        
        if not agent_ratings:
            logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã")
            return None
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
        plt.style.use('default')
        fig, ax = plt.subplots(figsize=(16, 10))
        
        criteria = ['–≠–∫–æ–Ω–æ–º–∏—è\n–≤—Ä–µ–º–µ–Ω–∏', '–ö–∞—á–µ—Å—Ç–≤–æ\n—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞', '–ü—Ä–æ—Å—Ç–æ—Ç–∞\n–≤–Ω–µ–¥—Ä–µ–Ω–∏—è', 
                   '–ú–∞—Å—à—Ç–∞–±–∏-\n—Ä—É–µ–º–æ—Å—Ç—å', 'ROI\n–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª']
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
        colors = ['#2E8B57', '#4169E1', '#FF6347', '#32CD32', '#FF8C00']
        
        x = np.arange(len(criteria))
        width = 0.12
        
        agents_list = list(agent_ratings.items())[:6]  # –¢–æ–ø 6 –∞–≥–µ–Ω—Ç–æ–≤
        
        for i, (agent_name, ratings) in enumerate(agents_list):
            offset = width * (i - len(agents_list)/2 + 0.5)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            color = plt.cm.Set3(i / len(agents_list))
            
            bars = ax.bar(x + offset, ratings, width, 
                         label=agent_name[:25] + ('...' if len(agent_name) > 25 else ''),
                         alpha=0.8, color=color, edgecolor='black', linewidth=0.5)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for j, bar in enumerate(bars):
                height = bar.get_height()
                ax.text(bar.get_x() + bar.get_width()/2., height + 0.05,
                       f'{ratings[j]}', ha='center', va='bottom', 
                       fontsize=10, fontweight='bold')
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        ax.set_xlabel('–ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏', fontsize=14, fontweight='bold', pad=15)
        ax.set_ylabel('–û—Ü–µ–Ω–∫–∞ (1-10)', fontsize=14, fontweight='bold', pad=15)
        ax.set_title('–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ AI-–∞–≥–µ–Ω—Ç–æ–≤', 
                     fontsize=16, fontweight='bold', pad=25)
        ax.set_xticks(x)
        ax.set_xticklabels(criteria, fontsize=11)
        ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=10)
        ax.set_ylim(0, 11)
        ax.grid(True, alpha=0.3, linestyle='--')
        
        # –£–ª—É—á—à–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
        ax.spines['left'].set_linewidth(1.5)
        ax.spines['bottom'].set_linewidth(1.5)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Å –¥–∞—Ç–æ–π
        fig.text(0.99, 0.01, f'–°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime("%d.%m.%Y %H:%M")}', 
                ha='right', va='bottom', fontsize=9, style='italic', color='gray')
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        chart_path = f"agent_utility_chart_{timestamp}.png"
        plt.savefig(chart_path, dpi=300, bbox_inches='tight', facecolor='white')
        plt.close()
        
        logging.info(f"‚úÖ –î–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {chart_path}")
        return chart_path
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
        return None

def check_general_message_with_gigachat(msg: str, user_id: int = None) -> tuple[str, str | None, dict | None]:
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é GigaChat –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        user_history = ""
        if user_id and user_id in gigachat_memory:
            recent_messages = list(gigachat_memory[user_id])[-4:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–æ–æ–±—â–µ–Ω–∏—è
            if recent_messages:
                user_history = "–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n" + "\n".join([
                    f"üë§: {msg_data['input'][:80]}...\nü§ñ: {msg_data['output'][:80]}..." 
                    for msg_data in recent_messages
                ]) + "\n\n"

        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        prompt = f"""
        {user_history}–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        \"\"\"{msg}\"\"\"

        –¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —É–º–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ AI-–∞–≥–µ–Ω—Ç–∞–º –∏ –±–∏–∑–Ω–µ—Å-–∏–¥–µ—è–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
        1. –í–µ–¥–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥
        2. –ü–æ–º–æ–≥–∞–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        3. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏
        4. –ü—Ä–µ–¥–ª–∞–≥–∞–π —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        –í–ê–ñ–ù–û: –í –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –≤–∏–¥–∏—à—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–º–æ—á—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º, –¥–æ–±–∞–≤–ª—è–π JSON-–∫–æ–º–∞–Ω–¥—É:
        ACTION: {{"action": "–Ω–∞–∑–≤–∞–Ω–∏–µ_–¥–µ–π—Å—Ç–≤–∏—è", "context": {{"–∫–ª—é—á": "–∑–Ω–∞—á–µ–Ω–∏–µ"}}}}

        –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
        - start: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ
        - process_idea_template: –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–¥–µ–∏ –ø–æ —à–∞–±–ª–æ–Ω—É  
        - process_idea_free: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–Ω–æ–π –∏–¥–µ–∏
        - show_agents: –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤
        - search_owners: –ø–æ–∏—Å–∫ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        - consultation: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        - help: —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        - generate_ideas: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∏–¥–µ–π

        –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è:

        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?"
        –¢—ã: –ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥–∞—é —Å AI-–∞–≥–µ–Ω—Ç–∞–º–∏ –∏ –±–∏–∑–Ω–µ—Å-–∏–¥–µ—è–º–∏! –ú–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤, –ø–æ–º–æ—á—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ—é –∏–¥–µ—é –∏–ª–∏ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤. –° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º? ACTION: {{"action": "start", "context": {{}}}}

        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–£ –º–µ–Ω—è –∏–¥–µ—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å HR –ø—Ä–æ—Ü–µ—Å—Å—ã"
        –¢—ã: –û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! üöÄ HR-–ø—Ä–æ—Ü–µ—Å—Å—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –∑–¥–æ—Ä–æ–≤–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é AI. –î–∞–≤–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à—É –∏–¥–µ—é –∏ –ø–æ—Å—á–∏—Ç–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª! ACTION: {{"action": "process_idea_free", "context": {{"idea_text": "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è HR –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"}}}}

        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–ö—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –¥–∞–Ω–Ω—ã—Ö?"
        –¢—ã: –û—Ç–ª–∏—á–Ω–æ! üìä –ù–∞–π–¥—É –¥–ª—è –≤–∞—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –Ω–∞—à–∏—Ö AI-–∞–≥–µ–Ω—Ç–æ–≤. ACTION: {{"action": "search_owners", "context": {{"search_query": "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"}}}}

        –ü—Ä–∞–≤–∏–ª–∞:
        - –ú–∞–∫—Å–∏–º—É–º 3000 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
        - –í—Å–µ–≥–¥–∞ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω
        - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–º–æ—â–∏
        - ACTION —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Ä–µ–∞–ª—å–Ω–æ –Ω—É–∂–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ
        - –ü–æ–Ω–∏–º–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - –ï—Å–ª–∏ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—à—å - –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–π
        """

        logging.info(f"[GigaChat Input User {user_id}] {msg}")
        raw_response = get_llm().invoke(prompt)
        logging.info(f"[GigaChat Output User {user_id}] {raw_response}")

        response = clean_response_text(raw_response)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id:
            gigachat_memory[user_id].append({
                "timestamp": datetime.now().isoformat(timespec="seconds"),
                "input": msg.strip(),
                "output": response.strip()
            })

        # –ò–∑–≤–ª–µ–∫–∞–µ–º ACTION –µ—Å–ª–∏ –µ—Å—Ç—å
        action_match = re.search(r'ACTION:\s*(\{[^}]+\})', response)
        suggested_action = None
        context_data = None
        
        if action_match:
            try:
                action_json = json.loads(action_match.group(1))
                suggested_action = action_json.get("action")
                context_data = action_json.get("context", {})
                # –£–±–∏—Ä–∞–µ–º ACTION –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
                response = re.sub(r'\s*ACTION:\s*\{[^}]+\}', '', response).strip()
                logging.info(f"üéØ –ò–∑–≤–ª–µ—á–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {suggested_action} —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º: {context_data}")
            except json.JSONDecodeError as e:
                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ACTION JSON: {e}")
        
        return response, suggested_action, context_data

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GigaChat: {e}")
        return f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}", None, None

def check_idea_with_gigachat_local(user_input: str, user_data: dict, is_free_form: bool = False) -> tuple[str, bool, dict, bool, str]:
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–¥–µ–∏ —Å –ø–æ–º–æ—â—å—é GigaChat
    """
    try:
        agents_data = load_agents_data()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if agents_data:
            agents_summary = []
            for agent in agents_data[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
                agents_summary.append(
                    f"‚Ä¢ {agent['name']} ({agent['type']}): {agent['description'][:100]}... "
                    f"[–í–ª–∞–¥–µ–ª–µ—Ü: {agent['owner']}, –ö–æ–Ω—Ç–∞–∫—Ç: {agent['contact']}]"
                )
            joined_data = "\n".join(agents_summary)
        else:
            joined_data = "(—Å–ø–∏—Å–æ–∫ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤ –ø—É—Å—Ç)"
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ agents.xlsx: {e}")
        joined_data = "(–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞—Ö)"

    if is_free_form:
        prompt = f"""
        –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï AI-–ê–ì–ï–ù–¢–´ –ò –ò–ù–ò–¶–ò–ê–¢–ò–í–´:
        {joined_data}

        –ó–ê–î–ê–ß–ê: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–µ:

        1. –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ò–ï –ò–î–ï–ò:
        –°–æ–±–µ—Ä–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —à–∞–±–ª–æ–Ω—É (–µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –µ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ):
        - "–ù–∞–∑–≤–∞–Ω–∏–µ": [–∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–¥–µ–∏]
        - "–ß—Ç–æ —Ö–æ—Ç–∏–º —É–ª—É—á—à–∏—Ç—å?": [–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã]
        - "–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≥–µ–Ω—Ç—É –Ω–∞ –≤—Ö–æ–¥?": [–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ]
        - "–ö–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å–µ–π—á–∞—Å? (as-is)": [—Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ]
        - "–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç –∞–≥–µ–Ω—Ç–∞?": [–æ–∂–∏–¥–∞–µ–º—ã–π –≤—ã—Ö–æ–¥]
        - "–î–æ—Å—Ç–∏–∂–∏–º—ã–π –∏–¥–µ–∞–ª (to-be)": [–∂–µ–ª–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ]
        - "–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ—Ü–µ—Å—Å–∞": [–æ—Ü–µ–Ω–∏: –º–∞–ª—ã–π/—Å—Ä–µ–¥–Ω–∏–π/–±–æ–ª—å—à–æ–π/–∫—Ä—É–ø–Ω—ã–π]

        2. –ê–ù–ê–õ–ò–ó –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò:
        –°—Ä–∞–≤–Ω–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏:
        - –ï—Å–ª–∏ –ø–æ—Ö–æ–∂–∞—è –∏–¥–µ—è –ï–°–¢–¨ ‚Üí –Ω–∞–ø–∏—à–∏ "–ù–ï —É–Ω–∏–∫–∞–ª—å–Ω–∞" –∏ —É–∫–∞–∂–∏:
          * –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ö–æ–∂–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
          * –í–ª–∞–¥–µ–ª–µ—Ü –∏ –∫–æ–Ω—Ç–∞–∫—Ç  
          * –í —á–µ–º —Å—Ö–æ–¥—Å—Ç–≤–æ
        - –ï—Å–ª–∏ –∏–¥–µ—è –ù–û–í–ê–Ø ‚Üí –Ω–∞–ø–∏—à–∏ "–£–Ω–∏–∫–∞–ª—å–Ω–∞"

        3. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
        –î–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –∏–¥–µ–∏.

        –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, –¥–æ 3500 —Å–∏–º–≤–æ–ª–æ–≤.

        –¢–ï–ö–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
        \"\"\"{user_data.get('–û–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ', '')}\"\"\"
        """
    else:
        user_initiative = "\n".join([f"‚Ä¢ {key}: {value}" for key, value in user_data.items() if key != "user_id"])
        
        prompt = f"""
        –ò–ù–ò–¶–ò–ê–¢–ò–í–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
        {user_initiative}

        –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ê–ì–ï–ù–¢–´:
        {joined_data}

        –ó–ê–î–ê–ß–ê:
        1. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å—Ä–∞–≤–Ω–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
        2. –û–ø—Ä–µ–¥–µ–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å:
           - –ù–ï —É–Ω–∏–∫–∞–ª—å–Ω–∞: —É–∫–∞–∂–∏ –ø–æ—Ö–æ–∂–∏–π –∞–≥–µ–Ω—Ç, –≤–ª–∞–¥–µ–ª—å—Ü–∞, –∫–æ–Ω—Ç–∞–∫—Ç, —Å—Ö–æ–¥—Å—Ç–≤–æ
           - –£–Ω–∏–∫–∞–ª—å–Ω–∞: –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        3. –û—Ü–µ–Ω–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –∏ –¥–∞–π —Å–æ–≤–µ—Ç—ã

        –û—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –¥–æ 3000 —Å–∏–º–≤–æ–ª–æ–≤.
        """

    try:
        logging.info(f"[GigaChat Idea Analysis] –ê–Ω–∞–ª–∏–∑ –∏–¥–µ–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.get('user_id', 'unknown')}")
        raw_response = get_llm().invoke(prompt)
        response_text = clean_response_text(raw_response)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = user_data.get("user_id")
        if user_id:
            gigachat_memory[user_id].append({
                "timestamp": datetime.now().isoformat(timespec="seconds"),
                "input": f"–ê–Ω–∞–ª–∏–∑ –∏–¥–µ–∏: {user_input[:100]}...",
                "output": response_text[:200] + "..."
            })

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        response_lower = response_text.lower()
        is_unique = ("—É–Ω–∏–∫–∞–ª—å–Ω–∞" in response_lower and 
                    "–Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω–∞" not in response_lower and
                    "–Ω–µ—É–Ω–∏–∫–∞–ª—å–Ω–∞" not in response_lower)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ö–æ–∂–µ–π –∏–¥–µ–µ
        similar_idea_description = ""
        if not is_unique:
            # –ò—â–µ–º –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Ö–æ–∂–µ–π –∏–¥–µ–µ
            lines = response_text.split('\n')
            collecting = False
            similar_lines = []
            
            for line in lines:
                line_lower = line.lower()
                if any(phrase in line_lower for phrase in ['–Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω–∞', '–Ω–µ—É–Ω–∏–∫–∞–ª—å–Ω–∞', '–ø–æ—Ö–æ–∂–∏–π –∞–≥–µ–Ω—Ç', '—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–≥–µ–Ω—Ç']):
                    collecting = True
                elif collecting and (line_lower.startswith('—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏') or 
                                   line_lower.startswith('—Å–æ–≤–µ—Ç—ã') or
                                   line_lower.startswith('–≤—ã–≤–æ–¥—ã')):
                    break
                
                if collecting and line.strip():
                    similar_lines.append(line.strip())
                    
            similar_idea_description = '\n'.join(similar_lines[:6])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É

        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º—ã
        parsed_data = {}
        if is_free_form:
            fields = [
                "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ß—Ç–æ —Ö–æ—Ç–∏–º —É–ª—É—á—à–∏—Ç—å?", "–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≥–µ–Ω—Ç—É –Ω–∞ –≤—Ö–æ–¥?",
                "–ö–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å–µ–π—á–∞—Å? (as-is)", "–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç –∞–≥–µ–Ω—Ç–∞?",
                "–î–æ—Å—Ç–∏–∂–∏–º—ã–π –∏–¥–µ–∞–ª (to-be)", "–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ—Ü–µ—Å—Å–∞"
            ]
            
            for field in fields:
                # –ò—â–µ–º –ø–æ–ª–µ –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞
                patterns = [
                    rf'["\']?{re.escape(field)}["\']?\s*[:\-‚Äì]\s*(.+?)(?=\n["\']?\w+["\']?\s*[:\-‚Äì]|$)',
                    rf'{re.escape(field.lower())}\s*[:\-‚Äì]\s*(.+?)(?=\n\w+\s*[:\-‚Äì]|$)',
                ]
                
                for pattern in patterns:
                    match = re.search(pattern, response_text, re.IGNORECASE | re.DOTALL)
                    if match:
                        value = match.group(1).strip()
                        # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                        value = re.sub(r'^\[|\], '', value)
                        value = value.strip()
                        if value and len(value) > 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –∑–Ω–∞—á–∏–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                            parsed_data[field] = value
                        break
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –µ—Å–ª–∏ –∏–¥–µ—è —É–Ω–∏–∫–∞–ª—å–Ω–∞
        if is_unique and (parsed_data or not is_free_form):
            try:
                data_for_cost = parsed_data if parsed_data else user_data
                cost = calculate_work_cost(data_for_cost, is_unique)
                response_text += f"\n\n{cost}"
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")

        suggest_processing = any(phrase in response_text.lower() for phrase in 
                               ["–ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–¥–µ—é", "–≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã –æ–ø–∏—Å–∞–ª–∏ –∏–¥–µ—é", "—ç—Ç–æ –∏–¥–µ—è"])

        logging.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: {is_unique}, –î–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã: {len(parsed_data)} –ø–æ–ª–µ–π")
        return response_text, is_unique, parsed_data, suggest_processing, similar_idea_description
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GigaChat –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–¥–µ–∏: {e}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–¥–µ–∏: {e}", False, {}, False, ""
    
def generate_idea_suggestions(query: str = "") -> str:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–¥–µ–π –¥–ª—è AI-–∞–≥–µ–Ω—Ç–æ–≤"""
    try:
        agents_data = load_agents_data()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—ã –∏ –æ–±–ª–∞—Å—Ç–∏
        existing_types = set()
        existing_areas = set()
        
        for agent in agents_data:
            if agent['type']:
                existing_types.add(agent['type'].lower())
            if agent['block']:
                existing_areas.add(agent['block'].lower())
        
        existing_types_str = ", ".join(sorted(existing_types)) if existing_types else "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
        existing_areas_str = ", ".join(sorted(existing_areas)) if existing_areas else "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π
        prompt = f"""
        –ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: "{query}"
        
        –ö–û–ù–¢–ï–ö–°–¢:
        ‚Ä¢ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—ã –∞–≥–µ–Ω—Ç–æ–≤: {existing_types_str}
        ‚Ä¢ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±–ª–∞—Å—Ç–∏: {existing_areas_str}
        ‚Ä¢ –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {len(agents_data)}
        
        –ó–ê–î–ê–ß–ê: –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 4-6 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏–¥–µ–π –¥–ª—è AI-–∞–≥–µ–Ω—Ç–æ–≤.
        
        –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
        1. –£—á–∏—Ç—ã–≤–∞–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        2. –ò–∑–±–µ–≥–∞–π –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–∏–ø–∞–º–∏
        3. –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö
        4. –£—á–∏—Ç—ã–≤–∞–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ AI
        
        –î–õ–Ø –ö–ê–ñ–î–û–ô –ò–î–ï–ò —É–∫–∞–∂–∏:
        üìå **–ù–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞**
        üéØ **–û–±–ª–∞—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è**: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å—Ñ–µ—Ä–∞]
        ‚öôÔ∏è **–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è**: [—á—Ç–æ –¥–µ–ª–∞–µ—Ç –∞–≥–µ–Ω—Ç]
        üí∞ **–û–∂–∏–¥–∞–µ–º–∞—è –ø–æ–ª—å–∑–∞**: [—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç]
        üîß **–°–ª–æ–∂–Ω–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è**: [–ø—Ä–æ—Å—Ç–∞—è/—Å—Ä–µ–¥–Ω—è—è/–≤—ã—Å–æ–∫–∞—è]
        üìä **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è**: [–≤ —á–∞—Å–∞—Ö/–¥–µ–Ω—å–≥–∞—Ö]
        
        –ü–†–ò–ú–ï–†–´ –ê–ö–¢–£–ê–õ–¨–ù–´–• –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ô:
        ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        ‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞
        ‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        
        –í –ö–û–ù–¶–ï –¥–æ–±–∞–≤—å: "üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏–¥–µ—é, –∏ —è –ø–æ–º–æ–≥—É –¥–µ—Ç–∞–ª—å–Ω–æ –µ—ë –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∞—Å—á–µ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏!"
        
        –û—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤.
        """
        
        logging.info(f"[GigaChat Ideas] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
        raw_response = get_llm().invoke(prompt)
        response = clean_response_text(raw_response)
        
        if not response or len(response.strip()) < 100:
            # Fallback –æ—Ç–≤–µ—Ç
            fallback_ideas = [
                "üìå **–ê–≥–µ–Ω—Ç —É–º–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂**\nüéØ –û–±–ª–∞—Å—Ç—å: –ö–æ–º–º–µ—Ä—Ü–∏—è\n‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–æ—Å–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–µ–Ω\nüí∞ –ü–æ–ª—å–∑–∞: +15-30% –∫ –≤—ã—Ä—É—á–∫–µ",
                "üìå **–ê–≥–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ HR-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤**\nüéØ –û–±–ª–∞—Å—Ç—å: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º\n‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è: –°–∫—Ä–∏–Ω–∏–Ω–≥ —Ä–µ–∑—é–º–µ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π\nüí∞ –ü–æ–ª—å–∑–∞: 70% —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ HR",
                "üìå **–ê–≥–µ–Ω—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**\nüéØ –û–±–ª–∞—Å—Ç—å: –î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç\n‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∏ –ø–æ–∏—Å–∫ –æ—à–∏–±–æ–∫\nüí∞ –ü–æ–ª—å–∑–∞: –°–Ω–∏–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –Ω–∞ 80%"
            ]
            
            response = "üí° **–ò–¥–µ–∏ –¥–ª—è AI-–∞–≥–µ–Ω—Ç–æ–≤:**\n\n" + "\n\n".join(fallback_ideas)
            response += "\n\nüöÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏–¥–µ—é, –∏ —è –ø–æ–º–æ–≥—É –¥–µ—Ç–∞–ª—å–Ω–æ –µ—ë –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∞—Å—á–µ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏!"
        
        logging.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–¥–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

def find_agent_owners(query: str) -> str:
    """–ü–æ–∏—Å–∫ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    try:
        agents_data = load_agents_data()
        
        if not agents_data:
            return "‚ö†Ô∏è –§–∞–π–ª —Å –∞–≥–µ–Ω—Ç–∞–º–∏ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        agents_info = "\n\n".join([
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {agent['name']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {agent['description']}\n"
            f"–¢–∏–ø: {agent['type']}\n"
            f"–ë–ª–æ–∫: {agent['block']}\n"
            f"–í–ª–∞–¥–µ–ª–µ—Ü: {agent['owner']}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç: {agent['contact']}"
            for agent in agents_data
        ])
        
        prompt = f"""
        –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{query}"
        
        –î–æ—Å—Ç—É–ø–Ω—ã–µ AI-–∞–≥–µ–Ω—Ç—ã:
        {agents_info}
        
        –ù–∞–π–¥–∏ –∞–≥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∏–±–æ–ª–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –£—á–∏—Ç—ã–≤–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–∏–ø –∏ –æ–±–ª–∞—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.
        
        –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ –≤—ã–≤–µ–¥–∏:
        - –ù–∞–∑–≤–∞–Ω–∏–µ
        - –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        - –í–ª–∞–¥–µ–ª–µ—Ü –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        - –ü–æ—á–µ–º—É —ç—Ç–æ—Ç –∞–≥–µ–Ω—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∑–∞–ø—Ä–æ—Å
        
        –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –∏–ª–∏ —Å–æ–≤–µ—Ç—ã.
        
        –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        """
        
        logging.info(f"[GigaChat Input] {prompt}")
        raw_response = get_llm().invoke(prompt)
        logging.info(f"[GigaChat Output] {raw_response}")
        
        response = clean_response_text(raw_response)
        
        return response if response else "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É."
        
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤: {e}"

def generate_agents_summary_file(agents_file_path: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∞–≥–µ–Ω—Ç–∞–º–∏"""
    try:
        agents_data = load_agents_data()
        
        if not agents_data:
            return None
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        summary_file = f"agents_summary_{timestamp}.xlsx"
        
        wb = Workbook()
        
        # –õ–∏—Å—Ç 1: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        ws1 = wb.active
        ws1.title = "–°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ["–ë–ª–æ–∫", "–°–°–ü", "–í–ª–∞–¥–µ–ª–µ—Ü", "–ö–æ–Ω—Ç–∞–∫—Ç", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ", "–¢–∏–ø"]
        ws1.append(headers)
        
        # –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        header_font = Font(bold=True, color="FFFFFF")
        header_fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
        thin_border = Border(
            left=Side(style="thin"), right=Side(style="thin"),
            top=Side(style="thin"), bottom=Side(style="thin")
        )
        
        for cell in ws1[1]:
            cell.font = header_font
            cell.fill = header_fill
            cell.border = thin_border
            cell.alignment = Alignment(horizontal="center", vertical="center")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for agent in agents_data:
            ws1.append([
                agent['block'], agent['ssp'], agent['owner'], agent['contact'],
                agent['name'], agent['short_name'], agent['description'], agent['type']
            ])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        for row in ws1.iter_rows(min_row=2, max_row=ws1.max_row):
            for cell in row:
                cell.border = thin_border
                cell.alignment = Alignment(wrap_text=True, vertical="top")
        
        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        for column in ws1.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws1.column_dimensions[column_letter].width = adjusted_width
        
        # –õ–∏—Å—Ç 2: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        ws2 = wb.create_sheet("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        type_stats = {}
        block_stats = {}
        
        for agent in agents_data:
            agent_type = agent['type'] or "–ù–µ —É–∫–∞–∑–∞–Ω"
            agent_block = agent['block'] or "–ù–µ —É–∫–∞–∑–∞–Ω"
            
            type_stats[agent_type] = type_stats.get(agent_type, 0) + 1
            block_stats[agent_block] = block_stats.get(agent_block, 0) + 1
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        ws2['A1'] = "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ AI-–∞–≥–µ–Ω—Ç–∞–º"
        ws2['A1'].font = Font(size=16, bold=True)
        ws2['A1'].alignment = Alignment(horizontal="center")
        ws2.merge_cells('A1:D1')
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        ws2['A3'] = "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
        ws2['A3'].font = Font(bold=True, size=12)
        ws2['A4'] = f"–í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(agents_data)}"
        ws2['A5'] = f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤: {len(type_stats)}"
        ws2['A6'] = f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤: {len(block_stats)}"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        ws2['A8'] = "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:"
        ws2['A8'].font = Font(bold=True, size=12)
        row = 9
        for agent_type, count in sorted(type_stats.items(), key=lambda x: x[1], reverse=True):
            ws2[f'A{row}'] = agent_type
            ws2[f'B{row}'] = count
            row += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–ª–æ–∫–∞–º
        ws2['D8'] = "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –±–ª–æ–∫–∞–º:"
        ws2['D8'].font = Font(bold=True, size=12)
        row = 9
        for block, count in sorted(block_stats.items(), key=lambda x: x[1], reverse=True):
            ws2[f'D{row}'] = block
            ws2[f'E{row}'] = count
            row += 1
        
        # –õ–∏—Å—Ç 3: –ö–æ–Ω—Ç–∞–∫—Ç—ã
        ws3 = wb.create_sheet("–ö–æ–Ω—Ç–∞–∫—Ç—ã –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤")
        ws3.append(["–í–ª–∞–¥–µ–ª–µ—Ü", "–ö–æ–Ω—Ç–∞–∫—Ç", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤", "–ù–∞–∑–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤"])
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
        owner_agents = {}
        for agent in agents_data:
            owner = agent['owner'] or "–ù–µ —É–∫–∞–∑–∞–Ω"
            if owner not in owner_agents:
                owner_agents[owner] = []
            owner_agents[owner].append(agent['name'])
        
        for owner, agent_names in owner_agents.items():
            contact = next((agent['contact'] for agent in agents_data if agent['owner'] == owner), "")
            ws3.append([owner, contact, len(agent_names), "; ".join(agent_names)])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        for cell in ws3[1]:
            cell.font = Font(bold=True)
            cell.fill = PatternFill(start_color="70AD47", end_color="70AD47", fill_type="solid")
            cell.font = Font(bold=True, color="FFFFFF")
        
        wb.save(summary_file)
        return summary_file
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return None

def generate_files(data: dict, cost_info: str = "") -> tuple[str, str]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Word –∏ Excel —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    word_path = f"initiative_{timestamp}.docx"
    excel_path = f"initiative_{timestamp}.xlsx"

    # –°–æ–∑–¥–∞–Ω–∏–µ Word –¥–æ–∫—É–º–µ–Ω—Ç–∞
    doc = Document()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    title = doc.add_heading("–û–ø–∏—Å–∞–Ω–∏–µ AI-–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã", 0)
    title.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    date_para = doc.add_paragraph(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}")
    date_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT
    date_run = date_para.runs[0]
    date_run.font.size = Pt(10)
    date_run.font.color.rgb = RGBColor(128, 128, 128)
    
    doc.add_paragraph()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    for key, value in data.items():
        if key == "user_id":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ –ø–æ–ª–µ
            continue
            
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–ª—è
        heading_para = doc.add_paragraph()
        heading_run = heading_para.add_run(f"üìã {key}")
        heading_run.bold = True
        heading_run.font.size = Pt(14)
        heading_run.font.color.rgb = RGBColor(0, 70, 132)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        line_para = doc.add_paragraph("‚îÄ" * 50)
        line_run = line_para.runs[0]
        line_run.font.color.rgb = RGBColor(200, 200, 200)
        
        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–ª—è
        content_para = doc.add_paragraph(str(value))
        content_run = content_para.runs[0]
        content_run.font.size = Pt(12)
        
        doc.add_paragraph()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if cost_info:
        cost_heading = doc.add_heading("üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏", level=2)
        doc.add_paragraph(cost_info)
    
    # –§—É—Ç–µ—Ä
    footer_para = doc.add_paragraph()
    footer_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
    footer_run = footer_para.add_run("–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é –ê–≥–µ–Ω—Ç–æ–ª–æ–≥–∞ ü§ñ")
    footer_run.font.size = Pt(10)
    footer_run.font.color.rgb = RGBColor(128, 128, 128)
    
    doc.save(word_path)

    # –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
    wb = Workbook()
    ws = wb.active
    ws.title = "–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞"

    # –°—Ç–∏–ª–∏
    header_font = Font(bold=True, color="FFFFFF")
    header_fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
    thin_border = Border(
        left=Side(style="thin"), right=Side(style="thin"),
        top=Side(style="thin"), bottom=Side(style="thin")
    )
    wrap_alignment = Alignment(wrap_text=True, vertical="top")
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    ws.append(["–ü–æ–ª–µ", "–ó–Ω–∞—á–µ–Ω–∏–µ"])
    for cell in ws[1]:
        cell.font = header_font
        cell.fill = header_fill
        cell.border = thin_border
        cell.alignment = Alignment(horizontal="center", vertical="center")
    
    # –î–∞–Ω–Ω—ã–µ
    for key, value in data.items():
        if key == "user_id":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ –ø–æ–ª–µ
            continue
        ws.append([key, str(value)])
        for cell in ws[ws.max_row]:
            cell.border = thin_border
            cell.alignment = wrap_alignment
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if cost_info:
        ws.append(["", ""])  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        ws.append(["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏", cost_info])
        for cell in ws[ws.max_row]:
            cell.border = thin_border
            cell.alignment = wrap_alignment
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
    ws.column_dimensions["A"].width = 35
    ws.column_dimensions["B"].width = 70
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    ws.append(["", ""])  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    info_row = ws.max_row + 1
    ws[f"A{info_row}"] = "–°–æ–∑–¥–∞–Ω–æ"
    ws[f"B{info_row}"] = datetime.now().strftime('%d.%m.%Y %H:%M')
    
    for cell in [ws[f"A{info_row}"], ws[f"B{info_row}"]]:
        cell.font = Font(italic=True, color="808080")
        cell.border = thin_border
    
    wb.save(excel_path)

    return word_path, excel_path

def calculate_work_cost(parsed_data: dict, is_unique: bool = True) -> str:
    """
    –†–∞—Å—á–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ –≤ —á–µ–ª./—á–∞—Å –∏ —Ä—É–±–ª—è—Ö.
    """
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    hourly_rate = 3500  # —Å—Ç–∞–≤–∫–∞ –≤ —á–∞—Å (—Ä—É–±–ª—è—Ö)
    base_hours = 40  # –±–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
    
    # –ö–∞—Ä—Ç–∞ –º–∞—Å—à—Ç–∞–±–∞ –∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É —á–∞—Å–æ–≤
    scale_map = {
        "–º–∞–ª—ã–π": 1,
        "–º–∞–ª": 1,
        "–Ω–µ–±–æ–ª—å—à–æ–π": 1,
        "—Å—Ä–µ–¥–Ω–∏–π": 1.8,
        "—Å—Ä–µ–¥–Ω": 1.8,  
        "–±–æ–ª—å—à–æ–π": 2.5,
        "–±–æ–ª—å—à": 2.5,
        "–∫—Ä—É–ø–Ω—ã–π": 3.2,
        "–∫—Ä—É–ø–Ω": 3.2,
        "–≥–ª–æ–±–∞–ª—å–Ω—ã–π": 4,
        "–≥–ª–æ–±–∞–ª—å–Ω": 4,
        "–º–∞—Å—à—Ç–∞–±–Ω—ã–π": 4
    }

    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—à—Ç–∞–± –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    scale_value = parsed_data.get("–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ—Ü–µ—Å—Å–∞", "").strip().lower()
    
    # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
    if scale_value.replace('.', '').replace(',', '').isdigit():
        hours_coefficient = float(scale_value.replace(',', '.'))
    else:
        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –º–∞—Å—à—Ç–∞–±–∞
        hours_coefficient = 1.0  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        for key, value in scale_map.items():
            if key in scale_value:
                hours_coefficient = value
                break
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    complexity_bonus = 0
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
    description_text = (
        parsed_data.get("–û–ø–∏—Å–∞–Ω–∏–µ", "") + " " +
        parsed_data.get("–ö–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å–µ–π—á–∞—Å? as-is", "") + " " +
        parsed_data.get("–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç –∞–≥–µ–Ω—Ç–∞?", "")
    ).lower()
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    complex_keywords = [
        "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", "–∞–ø–∏", "api", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "ml", "ai", 
        "–Ω–µ–π—Ä–æ–Ω–Ω", "–∞–ª–≥–æ—Ä–∏—Ç–º", "—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ", "nlp", "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ",
        "–±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ", "—Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è"
    ]
    
    simple_keywords = [
        "–ø—Ä–æ—Å—Ç–æ–π", "–±–∞–∑–æ–≤—ã–π", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω", "—Ç–∏–ø–æ–≤–æ–π", "—à–∞–±–ª–æ–Ω"
    ]
    
    for keyword in complex_keywords:
        if keyword in description_text:
            complexity_bonus += 0.3
            
    for keyword in simple_keywords:
        if keyword in description_text:
            complexity_bonus -= 0.2
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –±–æ–Ω—É—Å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    complexity_bonus = max(-0.5, min(complexity_bonus, 1.5))
    
    # –ï—Å–ª–∏ –∏–¥–µ—è –Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω–∞, —Å–Ω–∏–∂–∞–µ–º —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã (–µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è)
    uniqueness_coefficient = 1.0 if is_unique else 0.7
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —á–∞—Å–æ–≤
    total_hours = base_hours * hours_coefficient * (1 + complexity_bonus) * uniqueness_coefficient
    total_hours = max(20, total_hours)  # –ú–∏–Ω–∏–º—É–º 20 —á–∞—Å–æ–≤
    
    # –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —ç—Ç–∞–ø–∞–º (–ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
    analysis_hours = total_hours * 0.15  # 15% –Ω–∞ –∞–Ω–∞–ª–∏–∑
    development_hours = total_hours * 0.60  # 60% –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É
    testing_hours = total_hours * 0.15  # 15% –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    deployment_hours = total_hours * 0.10  # 10% –Ω–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ
    
    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    total_cost = total_hours * hourly_rate
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    cost_description = f"""
üìä **–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:**

üî¢ **–¢—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {analysis_hours:.0f} —á.
‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: {development_hours:.0f} —á.
‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞: {testing_hours:.0f} —á.
‚Ä¢ –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {deployment_hours:.0f} —á.
**–í—Å–µ–≥–æ —á–∞—Å–æ–≤: {total_hours:.0f} —á.**

üí∞ **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã:**
‚Ä¢ –°—Ç–∞–≤–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: {hourly_rate:,} ‚ÇΩ/—á–∞—Å
‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∞: {hours_coefficient}x
‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {(1 + complexity_bonus):.2f}x
‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏: {uniqueness_coefficient}x
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–¥–µ–∏: {'–î–∞' if is_unique else '–ù–µ—Ç (–µ—Å—Ç—å –∞–Ω–∞–ª–æ–≥–∏)'}

üí∏ **–ò–¢–û–ì–û–í–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {total_cost:,.0f} ‚ÇΩ**
üíº **({total_hours:.0f} —á–µ–ª./—á–∞—Å)**

üìà **–î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–æ–∏–º–æ—Å—Ç–∏:** {total_cost*0.8:,.0f} - {total_cost*1.3:,.0f} ‚ÇΩ
(–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π)

üìù **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –°—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç:
- –°–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
- –¢—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏  
- –û–±—ä–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–∞—á–µ—Å—Ç–≤–∞
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∑–∞–∫–∞–∑—á–∏–∫–∞
"""
    
    return cost_description