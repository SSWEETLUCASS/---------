import os
from datetime import datetime
from openpyxl import Workbook, load_workbook
from openpyxl.styles import Font, Border, Side, Alignment
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
from gigachat_wrapper import get_llm
import re

def check_idea_with_gigachat_local(user_input: str, user_data: dict) -> tuple[str, bool]:
    try:
        wb = load_workbook("agents.xlsm", data_only=True)
        ws = wb.active
        all_agents_data = []

        for row in ws.iter_rows(min_row=2, values_only=True):
            if not row or not row[4]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                continue

            block, ssp, owner, contact, name, short_name, desc, typ = row
            full_info = f"""–ë–ª–æ–∫: {block}
            –°–°–ü: {ssp}
            –í–ª–∞–¥–µ–ª–µ—Ü: {owner}
            –ö–æ–Ω—Ç–∞–∫—Ç: {contact}
            –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã: {name}
            –ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {short_name}
            –û–ø–∏—Å–∞–Ω–∏–µ: {desc}
            –¢–∏–ø: {typ}"""
            all_agents_data.append(full_info)

        if not all_agents_data:
            joined_data = "(—Å–ø–∏—Å–æ–∫ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤ –ø—É—Å—Ç)"
        else:
            joined_data = "\n\n".join(all_agents_data)

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ agents.xlsm: {e}")
        joined_data = "(–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞—Ö)"

    print("\nüìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:", len(all_agents_data))

    prompt = f"""
    –í–æ—Ç –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    –ù–∞–∑–≤–∞–Ω–∏–µ: {user_data['–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã']}
    –ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {user_data['–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ']}
    –û–ø–∏—Å–∞–Ω–∏–µ: {user_data['–û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã']}
    –¢–∏–ø: {user_data['–¢–∏–ø –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã']}

    –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã:
    {joined_data}

    –°—Ä–∞–≤–Ω–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞–º–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –∏ –æ—Ç–≤–µ—Ç—å:
    - –ï—Å–ª–∏ –∏–¥–µ—è –ø–æ—Ö–æ–∂–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ‚Äî –Ω–∞–ø–∏—à–∏ "–ù–ï —É–Ω–∏–∫–∞–ª—å–Ω–∞ + –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ö–æ–∂–µ–π –∏–Ω—Ü–∏–∏–∞—Ç–∏–≤—ã –∏ –µ–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞,–¥–∞–Ω–Ω—ã–µ –±–µ—Ä–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã".
    - –ï—Å–ª–∏ –∏–¥–µ—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤–∞—è ‚Äî –Ω–∞–ø–∏—à–∏ "–£–Ω–∏–∫–∞–ª—å–Ω–∞" –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è –ø–æ –Ω–µ–π.
    - –ï—Å–ª–∏ —è –ø–∏—à—É –Ω–µ—Ä–∞–∑—Ä–µ–±–µ—Ä–∏—Ö—É - –Ω–∞–ø–∏—à–∏ "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é".

    """

    raw_response = get_llm().invoke(prompt)

    response_text = str(raw_response).strip().lower()

    is_unique = "—É–Ω–∏–∫–∞–ª—å–Ω–∞" in response_text and "–Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω–∞" not in response_text

    return response_text, is_unique

def generate_files(data: dict):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    word_path = f"initiative_{timestamp}.docx"
    excel_path = f"initiative_{timestamp}.xlsx"

    doc = Document()
    title = doc.add_heading("–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ ‚Äî —à–∞–±–ª–æ–Ω", 0)
    title.alignment = WD_ALIGN_PARAGRAPH.CENTER

    for key, value in data.items():
        p = doc.add_paragraph()
        run = p.add_run(f"{key}:\n")
        run.bold = True
        run.font.size = Pt(14)
        run2 = p.add_run(f"{value}\n")
        run2.font.size = Pt(12)
        p.space_after = Pt(12)

    doc.save(word_path)

    wb = Workbook()
    ws = wb.active
    ws.title = "–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞"

    bold_font = Font(bold=True)
    thin_border = Border(
        left=Side(style="thin"), right=Side(style="thin"),
        top=Side(style="thin"), bottom=Side(style="thin")
    )
    alignment = Alignment(wrap_text=True, vertical="top")

    ws.append(["–ü–æ–ª–µ", "–ó–Ω–∞—á–µ–Ω–∏–µ"])
    for cell in ws[1]:
        cell.font = bold_font
        cell.border = thin_border
        cell.alignment = alignment

    for key, value in data.items():
        ws.append([key, value])
        for cell in ws[ws.max_row]:
            cell.border = thin_border
            cell.alignment = alignment

    ws.column_dimensions["A"].width = 30
    ws.column_dimensions["B"].width = 60
    wb.save(excel_path)

    return word_path, excel_path


if __name__ == "__main__":
    while True:
        print("\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã (–∏–ª–∏ '–≤—ã—Ö–æ–¥'):")
        title = input("–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã: ").strip()
        if title.lower() in ("–≤—ã—Ö–æ–¥", "exit", "quit"):
            break

        short = input("–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ").strip()
        desc = input("–û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã: ").strip()
        type_ = input("–¢–∏–ø –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã: ").strip()

        user_data = {
            "–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã": title,
            "–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ": short,
            "–û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã": desc,
            "–¢–∏–ø –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã": type_,
        }

        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ GigaChat...")
        result, is_unique = check_idea_with_gigachat_local(title, user_data)

        print("\nüß† –û—Ç–≤–µ—Ç GigaChat:")

        # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã—Ç–∞—â–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ content='...'
        match = re.search(r"content\s*=\s*['\"](.+?)['\"]", result)
        if match:
            print(match.group(1))
        else:
            print(result)

        if is_unique:
            print("\n‚úÖ –ò–¥–µ—è —É–Ω–∏–∫–∞–ª—å–Ω–∞!")

            choice = input("‚ùì –•–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
            if choice in ("–¥–∞", "–¥", "y", "yes"):
                print("üì¶ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤...")
                word_path, excel_path = generate_files(user_data)
                print(f"\nüìÑ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:\n - {word_path}\n - {excel_path}")
            else:
                print("üö´ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        else:
            print("\n‚ö†Ô∏è –ò–¥–µ—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π. –®–∞–±–ª–æ–Ω—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.")