import os
from datetime import datetime
from openpyxl import Workbook, load_workbook
from openpyxl.styles import Font, Border, Side, Alignment
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
from gigachat_wrapper import get_llm
import re

from difflib import SequenceMatcher

def retrieve_similar_ideas(user_input: str, agents_data: list[str], threshold: float = 0.3) -> list[str]:
    """
    –ü—Ä–æ—Å—Ç–µ–π—à–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è RAG: –∏—â–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã, –ø–æ—Ö–æ–∂–∏–µ –ø–æ —Ç–µ–∫—Å—Ç—É –Ω–∞ user_input
    """
    similar = []
    for idea in agents_data:
        ratio = SequenceMatcher(None, user_input.lower(), idea.lower()).ratio()
        if ratio > threshold:
            similar.append(idea)
    return similar

def check_idea_with_gigachat_local(user_input: str, user_data: dict, is_free_form: bool = False) -> tuple[str, bool, dict]:
    try:
        wb = load_workbook("agents.xlsx", data_only=True)
        ws = wb.active
        all_agents_data = []

        for row in ws.iter_rows(min_row=2, values_only=True):
            if not row or not row[4]:
                continue

            block, ssp, owner, contact, name, short_name, desc, typ = row
            full_info = f"""–ë–ª–æ–∫: {block}
–°–°–ü: {ssp}
–í–ª–∞–¥–µ–ª–µ—Ü: {owner}
–ö–æ–Ω—Ç–∞–∫—Ç: {contact}
–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã: {name}
–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {short_name}
–û–ø–∏—Å–∞–Ω–∏–µ: {desc}
–¢–∏–ø: {typ}"""
            all_agents_data.append(full_info)

        joined_data = "\n\n".join(all_agents_data) if all_agents_data else "(—Å–ø–∏—Å–æ–∫ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤ –ø—É—Å—Ç)"
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ agents.xlsx: {e}")
        joined_data = "(–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞—Ö)"

    # üéØ RAG ‚Äî –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Ö–æ–∂–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã
    rag_context = retrieve_similar_ideas(user_input, all_agents_data)
    rag_context_text = "\n\n".join(rag_context) if rag_context else "–ù–∏—á–µ–≥–æ –ø–æ—Ö–æ–∂–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    if is_free_form:
        prompt = f"""
–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤ (RAG):
{rag_context_text}

1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ –∑–∞–ø–æ–ª–Ω–∏ —à–∞–±–ª–æ–Ω:
"–ù–∞–∑–≤–∞–Ω–∏–µ", "–ß—Ç–æ —Ö–æ—Ç–∏–º —É–ª—É—á—à–∏—Ç—å?", "–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≥–µ–Ω—Ç—É –Ω–∞ –≤—ã—Ö–æ–¥?",
"–ö–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å–µ–π—á–∞—Å? as-is", "–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç –∞–≥–µ–Ω—Ç–∞?",
"–î–æ—Å—Ç–∏–∂–∏–º—ã–π –∏–¥–µ–∞–ª(to-be)", "–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ—Ü–µ—Å—Å–∞"

–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Äî —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º.

–¢–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
\"\"\"{user_data['–û–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ']}`\"\"\"

2. –°—Ä–∞–≤–Ω–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏:
- –ï—Å–ª–∏ –∏–¥–µ—è –ø–æ—Ö–æ–∂–∞ ‚Äî "–ù–ï —É–Ω–∏–∫–∞–ª—å–Ω–∞ + –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≤–ª–∞–¥–µ–ª–µ—Ü"
- –ï—Å–ª–∏ –Ω–æ–≤–∞—è ‚Äî "–£–Ω–∏–∫–∞–ª—å–Ω–∞", –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è
- –ï—Å–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é"
"""
    else:
        prompt = f"""
–í–æ—Ç –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
–ù–∞–∑–≤–∞–Ω–∏–µ: {user_data['–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã']}
–ß—Ç–æ —Ö–æ—Ç–∏–º —É–ª—É—á—à–∏—Ç—å?: {user_data['–ß—Ç–æ —Ö–æ—Ç–∏–º —É–ª—É—á—à–∏—Ç—å?']}
–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≥–µ–Ω—Ç—É –Ω–∞ –≤—ã—Ö–æ–¥?: {user_data['–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≥–µ–Ω—Ç—É –Ω–∞ –≤—ã—Ö–æ–¥?']}
–ö–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å–µ–π—á–∞—Å? as-is: {user_data['–ö–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å–µ–π—á–∞—Å? as-is']}
–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç –∞–≥–µ–Ω—Ç–∞?: {user_data['–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç –∞–≥–µ–Ω—Ç–∞?']}
–î–æ—Å—Ç–∏–∂–∏–º—ã–π –∏–¥–µ–∞–ª(to-be): {user_data['–î–æ—Å—Ç–∏–∂–∏–º—ã–π –∏–¥–µ–∞–ª(to-be)']}
–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ—Ü–µ—Å—Å–∞: {user_data['–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ—Ü–µ—Å—Å–∞']}

–ü–æ—Ö–æ–∂–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã (RAG):
{rag_context_text}

–°—Ä–∞–≤–Ω–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É —Å –Ω–∏–º–∏, –∏ –ø—Ä–∏–º–∏ —Ä–µ—à–µ–Ω–∏–µ: —É–Ω–∏–∫–∞–ª—å–Ω–∞ –∏–ª–∏ –Ω–µ—Ç?
"""

    raw_response = get_llm().invoke(prompt)
    response_text = str(raw_response).strip()

    is_unique = "—É–Ω–∏–∫–∞–ª—å–Ω–∞" in response_text.lower() and "–Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω–∞" not in response_text.lower()

    parsed_data = {}
    if is_free_form:
        fields = [
            "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ß—Ç–æ —Ö–æ—Ç–∏–º —É–ª—É—á—à–∏—Ç—å?", "–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≥–µ–Ω—Ç—É –Ω–∞ –≤—ã—Ö–æ–¥?",
            "–ö–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å–µ–π—á–∞—Å? as-is", "–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç –∞–≥–µ–Ω—Ç–∞?",
            "–î–æ—Å—Ç–∏–∂–∏–º—ã–π –∏–¥–µ–∞–ª(to-be)", "–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ—Ü–µ—Å—Å–∞"
        ]
        for field in fields:
            match = re.search(rf"{field}[:\-‚Äì]\s*(.+)", response_text, re.IGNORECASE)
            if match:
                parsed_data[field] = match.group(1).strip()

    return response_text, is_unique, parsed_data


if __name__ == "__main__":
    while True:
        print("\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã (–∏–ª–∏ '–≤—ã—Ö–æ–¥'):")
        title = input("–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã: ").strip()
        if title.lower() in ("–≤—ã—Ö–æ–¥", "exit", "quit"):
            break

        choice = input("‚ùì–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ —à–∞–±–ª–æ–Ω—É –∏–ª–∏ –æ–ø–∏—Å–∞—Ç—å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ? (—à–∞–±–ª–æ–Ω / —Å–≤–æ–±–æ–¥–Ω–æ): ").strip().lower()

        if choice.startswith("—à–∞–±"):
            user_data = {
                "–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã": title,
                "–ß—Ç–æ —Ö–æ—Ç–∏–º —É–ª—É—á—à–∏—Ç—å?": input("–ß—Ç–æ —Ö–æ—Ç–∏–º —É–ª—É—á—à–∏—Ç—å?: ").strip(),
                "–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≥–µ–Ω—Ç—É –Ω–∞ –≤—ã—Ö–æ–¥?": input("–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≥–µ–Ω—Ç—É –Ω–∞ –≤—ã—Ö–æ–¥?: ").strip(),
                "–ö–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å–µ–π—á–∞—Å? as-is": input("–ö–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å–µ–π—á–∞—Å? as-is: ").strip(),
                "–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç –∞–≥–µ–Ω—Ç–∞?": input("–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç –∞–≥–µ–Ω—Ç–∞?: ").strip(),
                "–î–æ—Å—Ç–∏–∂–∏–º—ã–π –∏–¥–µ–∞–ª(to-be)": input("–î–æ—Å—Ç–∏–∂–∏–º—ã–π –∏–¥–µ–∞–ª(to-be): ").strip(),
                "–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ—Ü–µ—Å—Å–∞": input("–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ—Ü–µ—Å—Å–∞: ").strip()
            }

            print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ GigaChat...")
            result, is_unique, parsed_data = check_idea_with_gigachat_local(title, user_data)

        else:
            free_text = input("üìù –û–ø–∏—à–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ: ").strip()
            user_data = {"–û–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ": free_text}

            print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ GigaChat...")
            result, is_unique, parsed_data = check_idea_with_gigachat_local(title, user_data, is_free_form=True)

        print("\nüß† –û—Ç–≤–µ—Ç GigaChat:")
        match = re.search(r"content\s*=\s*['\"](.+?)['\"]", result)
        if match:
            print(match.group(1))
        else:
            print(result)

        if is_unique:
            print("\n‚úÖ –ò–¥–µ—è —É–Ω–∏–∫–∞–ª—å–Ω–∞!")

            if parsed_data:
                choice = input("üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
                if choice in ("–¥–∞", "–¥", "yes", "y"):
                    word_path, excel_path = generate_files(parsed_data)
                    print(f"\nüìÑ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:\n - {word_path}\n - {excel_path}")
                else:
                    print("üö´ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç. –®–∞–±–ª–æ–Ω—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.")

        else:
            print("\n‚ö†Ô∏è –ò–¥–µ—è –Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω–∞ –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω–∞.")
