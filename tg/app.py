import logging
import os
from datetime import datetime
from docx import Document
from openpyxl import Workbook, load_workbook
from telegram import Update, InputFile, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, ContextTypes,
    CommandHandler, MessageHandler, filters
)
from dotenv import load_dotenv
from docx.shared import Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
from openpyxl.styles import Font, Border, Side, Alignment
import requests

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN", "7974253432:AAFztKIqek8xTPotu3NvtXucc26RLFRoFyE")
DEEPSEEK_API_KEY = "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"
DEEPSEEK_API_URL = "https://openrouter.ai/api/v1/chat/completions"

TEMPLATE_FIELDS = [
    "–ù–∞–∑–≤–∞–Ω–∏–µ",
    "–ß—Ç–æ —Ö–æ—Ç–∏–º —É–ª—É—á—à–∏—Ç—å?",
    "–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≥–µ–Ω—Ç—É –Ω–∞ –≤—ã—Ö–æ–¥?",
    "–ö–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å–µ–π—á–∞—Å? as-is",
    "–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç –∞–≥–µ–Ω—Ç–∞?",
    "–î–æ—Å—Ç–∏–∂–∏–º—ã–π –∏–¥–µ–∞–ª(to-be)",
    "–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ—Ü–µ—Å—Å–∞"
]

user_states = {}
agent_query_state = {}

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–¥–µ–∏ —á–µ—Ä–µ–∑ DeepSeek —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ñ–∞–π–ª–∞ agents.xlsx ===
def check_idea_with_deepseek(user_input: str) -> tuple[str, str]:
    try:
        wb = load_workbook("agents.xlsx")
        ws = wb.active
        all_agents_data = []
        contact = None
        for row in ws.iter_rows(min_row=2, values_only=True):
            if not row[0]:
                continue
            name, team, contact_cell, desc = row
            full_info = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}, –ö–æ–º–∞–Ω–¥–∞: {team}, –ö–æ–Ω—Ç–∞–∫—Ç: {contact_cell}, –û–ø–∏—Å–∞–Ω–∏–µ: {desc}"
            all_agents_data.append(full_info)
            if name and user_input.lower() in name.lower():
                contact = contact_cell
        joined_data = "\n".join(all_agents_data)
    except Exception as e:
        joined_data = "(–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≥–µ–Ω—Ç–∞—Ö)"
        contact = None

    prompt = (
        f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö AI-–∞–≥–µ–Ω—Ç–æ–≤:\n{joined_data}\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏–¥–µ—é: {user_input}.\n"
        "–ü—Ä–æ–≤–µ—Ä—å, –µ—Å—Ç—å –ª–∏ –ø–æ—Ö–æ–∂–∏–µ –∏–¥–µ–∏ –∏ –æ—Ü–µ–Ω–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ï—Å–ª–∏ –∏–¥–µ–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ —á–∞—Å—Ç–∏—á–Ω–æ, –Ω–∞–ø–∏—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç –ª–∏–¥–µ—Ä–∞ –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞!"
    )

    headers = {
        'Authorization': f'Bearer {DEEPSEEK_API_KEY}',
        'Content-Type': 'application/json'
    }
    data = {
        "model": "deepseek/deepseek-chat:free",
        "messages": [{"role": "user", "content": prompt}]
    }
    try:
        response = requests.post(DEEPSEEK_API_URL, json=data, headers=headers)
        if response.status_code == 200:
            summary = response.json()['choices'][0]['message']['content']
            return summary, contact
        else:
            return f"–û—à–∏–±–∫–∞ DeepSeek API: {response.status_code}", None
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ DeepSeek: {e}", None

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def get_main_menu():
    keyboard = [
        [KeyboardButton("–£ –º–µ–Ω—è –µ—Å—Ç—å –∏–¥–µ—è!üí°")],
        [KeyboardButton("–ê–ò-–∞–≥–µ–Ω—Ç—ã?üìç")],
        [KeyboardButton("–ö—Ç–æ –ø–æ–º–æ–∂–µ—Ç?üí¨")],
        [KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞üìù")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ ===
def generate_files(data):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    word_path = f"agent_{timestamp}.docx"
    excel_path = f"agent_{timestamp}.xlsx"

    doc = Document()
    title = doc.add_heading("AI-–∞–≥–µ–Ω—Ç ‚Äî —à–∞–±–ª–æ–Ω", 0)
    title.alignment = WD_ALIGN_PARAGRAPH.CENTER

    for key, value in data.items():
        p = doc.add_paragraph()
        run = p.add_run(f"{key}:\n")
        run.bold = True
        run.font.size = Pt(14)

        run2 = p.add_run(f"{value}\n")
        run2.font.size = Pt(12)
        p.space_after = Pt(12)

    doc.save(word_path)

    wb = Workbook()
    ws = wb.active
    ws.title = "–ê–≥–µ–Ω—Ç"

    bold_font = Font(bold=True)
    thin_border = Border(left=Side(style="thin"), right=Side(style="thin"), top=Side(style="thin"), bottom=Side(style="thin"))
    alignment = Alignment(wrap_text=True, vertical="top")

    ws.append(["–ü–æ–ª–µ", "–ó–Ω–∞—á–µ–Ω–∏–µ"])
    for cell in ws[1]:
        cell.font = bold_font
        cell.border = thin_border
        cell.alignment = alignment

    for key, value in data.items():
        ws.append([key, value])
        for cell in ws[ws.max_row]:
            cell.border = thin_border
            cell.alignment = alignment

    ws.column_dimensions["A"].width = 30
    ws.column_dimensions["B"].width = 60

    wb.save(excel_path)
    return word_path, excel_path

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, @{update.effective_user.username or 'user'}! \n"
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>–ê–≥–µ–Ω—Ç–æ–ª–æ–≥</b>, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∏–¥–µ—è–º–∏ –¥–ª—è AI-–∞–≥–µ–Ω—Ç–æ–≤.\n\n"
        "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:\n"
        "<b>1. –£ –º–µ–Ω—è –µ—Å—Ç—å –∏–¥–µ—è!üí°</b>\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–≤–æ—è –∏–¥–µ—è <b>—É–Ω–∏–∫–∞–ª—å–Ω–∞!</b>\n\n"
        "<b>2. –ê–ò-–∞–≥–µ–Ω—Ç—ã?üìç</b>\n"
        "–ê–ò-–∞–≥–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –∑–¥–µ—Å—å –º—ã —Å–æ–±—Ä–∞–ª–∏ —Å–∞–º—ã–π <b>—Å–≤–µ–∂–∏–π —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤!</b>\n\n"
        "<b>3. –ö—Ç–æ –ø–æ–º–æ–∂–µ—Ç?üí¨</b>\n"
        "–ê–≥–µ–Ω—Ç–æ–≤ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –∏ –Ω–µ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏, –∫—Ç–æ –∏—Ö —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç. –î–∞–≤–∞–π <b>–ø–æ–¥—Å–∫–∞–∂–µ–º</b>, –∫—Ç–æ —ç—Ç–∏ –ª—é–¥–∏!\n\n"
        "<b>4. –ü–æ–¥–¥–µ—Ä–∂–∫–∞üìù</b>\n"
        "–û—Å—Ç–∞–ª–∏—Å—å <b>–≤–æ–ø—Ä–æ—Å—ã</b> –∏–ª–∏ <b>–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b> –ø–æ —Ä–∞–±–æ—Ç–µ —á–∞—Ç-–±–æ—Ç–∞? –ü–∏—à–∏ –Ω–∞–º!\n\n"
        "–°–∫–æ—Ä–µ–µ –≤—ã–±–∏—Ä–∞–π, —á—Ç–æ –º—ã –±—É–¥–µ–º –¥–µ–ª–∞—Ç—åüëá",
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    msg = update.message.text.strip()

    if msg == "–£ –º–µ–Ω—è –µ—Å—Ç—å –∏–¥–µ—è!üí°":
        user_states[user_id] = {"deepseek_mode": True}
        await update.message.reply_text("üí¨ –û–ø–∏—à–∏ —Å–≤–æ—é –∏–¥–µ—é —Å–≤–æ–±–æ–¥–Ω–æ, —è –ø—Ä–æ–≤–µ—Ä—é –µ—ë —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å:")
        return

    if user_id in user_states and user_states[user_id].get("deepseek_mode"):
        idea_text = msg
        await update.message.reply_text("üîç –û—Ç–ø—Ä–∞–≤–ª—è—é –∏–¥–µ—é –≤ DeepSeek...")
        result, contact = check_idea_with_deepseek(idea_text)
        await update.message.reply_text(f"ü§ñ –û—Ç–≤–µ—Ç DeepSeek:\n\n<b>{result}</b>", parse_mode="HTML")

        return

    if msg == "–ê–ò-–∞–≥–µ–Ω—Ç—ã?üìç":
        keyboard = [[KeyboardButton("–í—Å–µ –∞–≥–µ–Ω—Ç—ã (Excel)")], [KeyboardButton("–ò—Å–∫–∞—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")]]
        await update.message.reply_text("üìã –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return

    if msg == "–í—Å–µ –∞–≥–µ–Ω—Ç—ã (Excel)":
        try:
            with open("agents.xlsx", "rb") as file:
                await update.message.reply_document(InputFile(file))
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e}")
        return

    if msg == "–ò—Å–∫–∞—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é":
        agent_query_state[user_id] = True
        await update.message.reply_text("üîç –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞:")
        return

    if agent_query_state.get(user_id):
        agent_query_state[user_id] = False
        term = msg.lower()
        try:
            wb = load_workbook("agents.xlsx")
            ws = wb.active
            results = [r for r in ws.iter_rows(min_row=2, values_only=True) if term in (r[0] or '').lower()]
            if not results:
                await update.message.reply_text("‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
            else:
                for r in results:
                    name, team, contact, desc = r
                    await update.message.reply_text(
                        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>–ö–æ–º–∞–Ω–¥–∞:</b> {team}\n<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {contact}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {desc}",
                        parse_mode="HTML")
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}", reply_markup=get_main_menu())
        return

    if msg == "–ö—Ç–æ –ø–æ–º–æ–∂–µ—Ç?üí¨":
        await update.message.reply_text("üßë‚Äçüíª –ü–æ–∫–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=get_main_menu())
        return

    if msg == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞üìù":
        await update.message.reply_text("‚úâÔ∏è –ù–∞–ø–∏—à–∏ –Ω–∞–º –≤ Telegram: @your_support_bot", reply_markup=get_main_menu())
        return

    if user_id in user_states:
        state = user_states[user_id]
        step = state.get("step")

        if step is not None and step < len(TEMPLATE_FIELDS):
            field = TEMPLATE_FIELDS[step]
            state["data"][field] = msg
            state["step"] += 1

            if state["step"] < len(TEMPLATE_FIELDS):
                next_field = TEMPLATE_FIELDS[state["step"]]
                await update.message.reply_text(f"{state['step'] + 1}Ô∏è‚É£ {next_field}:")
            else:
                await update.message.reply_text("‚úÖ –§–æ—Ä–º–∏—Ä—É—é —Ñ–∞–π–ª—ã...")
                word_path, excel_path = generate_files(state["data"])

                with open(word_path, "rb") as doc_file:
                    await update.message.reply_document(InputFile(doc_file))
                with open(excel_path, "rb") as excel_file:
                    await update.message.reply_document(InputFile(excel_file))

                os.remove(word_path)
                os.remove(excel_path)
                user_states.pop(user_id)
                await update.message.reply_text("üìÅ –®–∞–±–ª–æ–Ω—ã –≥–æ—Ç–æ–≤—ã. –í—ã–±–∏—Ä–∞–π —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())
        return

    await update.message.reply_text("ü§ñ –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é!", reply_markup=get_main_menu())

# === –ó–∞–ø—É—Å–∫ ===
logging.basicConfig(level=logging.INFO)
app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
